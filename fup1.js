/* Generated by the Nim Compiler v1.4.2 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
var NTI2456005 = {size: 0,kind: 36,base: null,node: null,finalizer: null};
var NTI14565002 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI13810029 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI13785388 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI13785373 = {size: 0,kind: 20,base: null,node: null,finalizer: null};
var NTI13805029 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI13785385 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI13785371 = {size: 0,kind: 20,base: null,node: null,finalizer: null};
var NTI13825321 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI2456068 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI13825216 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI2456066 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI2456064 = {size: 0,kind: 1,base: null,node: null,finalizer: null};
var NTI13825211 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI13825207 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI13825202 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI12522033 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI12522018 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI13745008 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI13745002 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI14060072 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI13900428 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI6855232 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI7110011 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI2462653 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI13787257 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI2456044 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI13787232 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI13785391 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI13785375 = {size: 0,kind: 20,base: null,node: null,finalizer: null};
var NTI13785382 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI13785378 = {size: 0,kind: 20,base: null,node: null,finalizer: null};
var NTI13785377 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI13845001 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI12566015 = {size: 0,kind: 43,base: null,node: null,finalizer: null};
var NTI12566202 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI2462641 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI13825233 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI2462408 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI2462728 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI2456015 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI2462723 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI2462617 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI2462619 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI2462651 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI2456013 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI13745013 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NNI13745013 = {kind: 2, offset: 0, typ: null, name: null, len: 8, sons: {"0": {kind: 1, offset: 0, typ: NTI13745013, name: "tetNone", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI13745013, name: "tetI", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI13745013, name: "tetJ", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI13745013, name: "tetL", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI13745013, name: "tetO", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI13745013, name: "tetS", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI13745013, name: "tetZ", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI13745013, name: "tetT", len: 0, sons: null}}};
NTI13745013.node = NNI13745013;
var NNI2462651 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI2462651.node = NNI2462651;
var NNI2462619 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI2462619.node = NNI2462619;
NTI2462723.base = NTI2462617;
NTI2462728.base = NTI2462617;
var NNI2462617 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI2462723, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI2456015, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI2456013, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI2456013, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI2462728, name: "up", sons: null}]};
NTI2462617.node = NNI2462617;
var NNI2462408 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI2462408.node = NNI2462408;
NTI2462617.base = NTI2462408;
NTI2462619.base = NTI2462617;
NTI2462651.base = NTI2462619;
var NNI13825233 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI13745013, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI13745013, name: "b", sons: null}]};
NTI13825233.node = NNI13825233;
var NNI2462641 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI2462641.node = NNI2462641;
NTI2462641.base = NTI2462619;
var NNI12566202 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a0", len: 0, typ: NTI12566015, name: "a0", sons: null}, 
{kind: 1, offset: "a1", len: 0, typ: NTI12566015, name: "a1", sons: null}]};
NTI12566202.node = NNI12566202;
NTI13845001.base = NTI13745013;
NTI13785378.base = NTI13785382;
NTI13785375.base = NTI13785391;
var NNI13785377 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "kind", len: 0, typ: NTI13745013, name: "kind", sons: null}, 
{kind: 1, offset: "pos", len: 0, typ: NTI13785378, name: "pos", sons: null}, 
{kind: 1, offset: "rot", len: 0, typ: NTI13785375, name: "rot", sons: null}]};
NTI13785377.node = NNI13785377;
var NNI13787232 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI2456044, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI2456044, name: "Field1", sons: null}]};
NTI13787232.node = NNI13787232;
var NNI13787257 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI2456044, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI2456044, name: "Field1", sons: null}]};
NTI13787257.node = NNI13787257;
var NNI2462653 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI2462653.node = NNI2462653;
NTI2462653.base = NTI2462619;
var NNI7110011 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI6855232, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI2456044, name: "b", sons: null}]};
NTI7110011.node = NNI7110011;
NTI13900428.base = NTI13785377;
var NNI13745002 = {kind: 2, offset: 0, typ: null, name: null, len: 4, sons: {"0": {kind: 1, offset: 0, typ: NTI13745002, name: "gsNone", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI13745002, name: "gsInitial", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI13745002, name: "gsTetris", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI13745002, name: "gsDone", len: 0, sons: null}}};
NTI13745002.node = NNI13745002;
var NNI12522033 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI12522033.node = NNI12522033;
NTI12522018.base = NTI12522033;
var NNI13745008 = {kind: 1, offset: "background", len: 0, typ: NTI12522018, name: "background", sons: null};
NTI13745008.node = NNI13745008;
NTI13825207.base = NTI13745013;
NTI13825211.base = NTI13785377;
NTI13825321.base = NTI13745013;
var NNI13825202 = {kind: 2, len: 13, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "board", len: 0, typ: NTI13825207, name: "board", sons: null}, 
{kind: 1, offset: "nextPieces", len: 0, typ: NTI13825211, name: "nextPieces", sons: null}, 
{kind: 1, offset: "piece", len: 0, typ: NTI13785377, name: "piece", sons: null}, 
{kind: 1, offset: "pieceDropTicking", len: 0, typ: NTI2456064, name: "pieceDropTicking", sons: null}, 
{kind: 1, offset: "pieceDropTick", len: 0, typ: NTI2456066, name: "pieceDropTick", sons: null}, 
{kind: 1, offset: "pieceDropTime", len: 0, typ: NTI13825216, name: "pieceDropTime", sons: null}, 
{kind: 1, offset: "pieceDropTickMultiplier", len: 0, typ: NTI2456068, name: "pieceDropTickMultiplier", sons: null}, 
{kind: 1, offset: "pieceDropRetry", len: 0, typ: NTI2456066, name: "pieceDropRetry", sons: null}, 
{kind: 1, offset: "pieceDropRetries", len: 0, typ: NTI2456068, name: "pieceDropRetries", sons: null}, 
{kind: 1, offset: "holdPiece", len: 0, typ: NTI13785377, name: "holdPiece", sons: null}, 
{kind: 1, offset: "justHeld", len: 0, typ: NTI2456064, name: "justHeld", sons: null}, 
{kind: 1, offset: "randBuffer", len: 0, typ: NTI13825321, name: "randBuffer", sons: null}, 
{kind: 1, offset: "randBufferPos", len: 0, typ: NTI2456044, name: "randBufferPos", sons: null}]};
NTI13825202.node = NNI13825202;
var NNI14060072 = {kind: 3, offset: "kind", len: 4, typ: NTI13745002, name: "kind", sons: [[setConstr(1), {kind: 1, offset: "initial", len: 0, typ: NTI13745008, name: "initial", sons: null}], 
[setConstr(2), {kind: 1, offset: "tetris", len: 0, typ: NTI13825202, name: "tetris", sons: null}], 
[setConstr(3), {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []}], 
[setConstr(4), {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []}]]};
NTI14060072.node = NNI14060072;
NTI13785371.base = NTI13785385;
var NNI13805029 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI13785371, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI13785371, name: "b", sons: null}]};
NTI13805029.node = NNI13805029;
NTI13785373.base = NTI13785388;
var NNI13810029 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI13785373, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI13785373, name: "b", sons: null}]};
NTI13810029.node = NNI13810029;
var NNI14565002 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI2456005, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI2456005, name: "Field1", sons: null}]};
NTI14565002.node = NNI14565002;
function arrayConstr(len_2750067, value_2750068, typ_2750069) {
        var result = new Array(len_2750067);
    for (var i = 0; i < len_2750067; ++i) result[i] = nimCopy(null, value_2750068, typ_2750069);
    return result;
  

  
}
function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);
function nimCopy(dest_2740023, src_2740024, ti_2740025) {
  var result_2745219 = null;

    switch (ti_2740025.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(isFatPointer_2735401(ti_2740025))) {
      result_2745219 = src_2740024;
      }
      else {
        result_2745219 = [src_2740024[0], src_2740024[1]];
      }
      
      break;
    case 19:
            if (dest_2740023 === null || dest_2740023 === undefined) {
        dest_2740023 = {};
      }
      else {
        for (var key in dest_2740023) { delete dest_2740023[key]; }
      }
      for (var key in src_2740024) { dest_2740023[key] = src_2740024[key]; }
      result_2745219 = dest_2740023;
    
      break;
    case 18:
    case 17:
      if (!((ti_2740025.base == null))) {
      result_2745219 = nimCopy(dest_2740023, src_2740024, ti_2740025.base);
      }
      else {
      if ((ti_2740025.kind == 17)) {
      result_2745219 = (dest_2740023 === null || dest_2740023 === undefined) ? {m_type: ti_2740025} : dest_2740023;
      }
      else {
        result_2745219 = (dest_2740023 === null || dest_2740023 === undefined) ? {} : dest_2740023;
      }
      }
      nimCopyAux(result_2745219, src_2740024, ti_2740025.node);
      break;
    case 24:
    case 4:
    case 27:
    case 16:
            if (src_2740024 === null) {
        result_2745219 = null;
      }
      else {
        if (dest_2740023 === null || dest_2740023 === undefined) {
          dest_2740023 = new Array(src_2740024.length);
        }
        else {
          dest_2740023.length = src_2740024.length;
        }
        result_2745219 = dest_2740023;
        for (var i = 0; i < src_2740024.length; ++i) {
          result_2745219[i] = nimCopy(result_2745219[i], src_2740024[i], ti_2740025.base);
        }
      }
    
      break;
    case 28:
            if (src_2740024 !== null) {
        result_2745219 = src_2740024.slice(0);
      }
    
      break;
    default: 
      result_2745219 = src_2740024;
      break;
    }

  return result_2745219;

}
var ConstSet2 = setConstr(1);
function makeNimstrLit(c_2725062) {
      var ln = c_2725062.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_2725062.charCodeAt(i);
  }
  return result;
  

  
}
function toJSStr(s_2725096) {
                    var Tmp5;
            var Tmp7;

  var result_2725097 = null;

    var res_2725170 = newSeq_2725128((s_2725096).length);
    var i_2725172 = 0;
    var j_2725174 = 0;
    L1: do {
        L2: while (true) {
        if (!(i_2725172 < (s_2725096).length)) break L2;
          var c_2725175 = s_2725096[i_2725172];
          if ((c_2725175 < 128)) {
          res_2725170[j_2725174] = String.fromCharCode(c_2725175);
          i_2725172 += 1;
          }
          else {
            var helper_2725198 = newSeq_2725128(0);
            L3: do {
                L4: while (true) {
                if (!true) break L4;
                  var code_2725199 = c_2725175.toString(16);
                  if (((code_2725199).length == 1)) {
                  helper_2725198.push("%0");;
                  }
                  else {
                  helper_2725198.push("%");;
                  }
                  
                  helper_2725198.push(code_2725199);;
                  i_2725172 += 1;
                    if (((s_2725096).length <= i_2725172)) Tmp5 = true; else {                      Tmp5 = (s_2725096[i_2725172] < 128);                    }                  if (Tmp5) {
                  break L3;
                  }
                  
                  c_2725175 = s_2725096[i_2725172];
                }
            } while(false);
++excHandler;
            Tmp7 = framePtr;
            try {
            res_2725170[j_2725174] = decodeURIComponent(helper_2725198.join(""));
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
            framePtr = Tmp7;
            res_2725170[j_2725174] = helper_2725198.join("");
            lastJSError = prevJSError;
            } finally {
            framePtr = Tmp7;
            }
          }
          
          j_2725174 += 1;
        }
    } while(false);
    if (res_2725170.length < j_2725174) { for (var i=res_2725170.length;i<j_2725174;++i) res_2725170.push(null); }
               else { res_2725170.length = j_2725174; };
    result_2725097 = res_2725170.join("");

  return result_2725097;

}
function raiseException(e_2690218, ename_2690219) {
    e_2690218.name = ename_2690219;
    if ((excHandler == 0)) {
    unhandledException(e_2690218);
    }
    
    throw e_2690218;

  
}
function raiseFieldError(f_2720047) {
    raiseException({message: nimCopy(null, f_2720047, NTI2456013), parent: null, m_type: NTI2462651, name: null, trace: [], up: null}, "FieldDefect");

  
}
var ConstSet3 = setConstr(2);
var ConstSet4 = setConstr(2);
var ConstSet5 = setConstr(2);
var ConstSet6 = setConstr(2);
var ConstSet7 = setConstr(2);
var ConstSet8 = setConstr(2);
var ConstSet9 = setConstr(2);
var ConstSet10 = setConstr(2);
function nimMax(a_2730821, b_2730822) {
    var Tmp1;

  var result_2730823 = 0;

  BeforeRet: do {
    if ((b_2730822 <= a_2730821)) {
    Tmp1 = a_2730821;
    }
    else {
    Tmp1 = b_2730822;
    }
    
    result_2730823 = Tmp1;
    break BeforeRet;
  } while (false);

  return result_2730823;

}
var ConstSet11 = setConstr(2);
    var minDims_13815214 = [{Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: -1}, {Field0: -1, Field1: -1}, {Field0: 0, Field1: 0}, {Field0: -1, Field1: 0}, {Field0: -1, Field1: 0}, {Field0: -1, Field1: 0}];
var ConstSet12 = setConstr(2);
var ConstSet13 = setConstr(2);
var ConstSet14 = setConstr(2, 3);
        var pieceExtensions_13785367 = [[], [{Field0: 0, Field1: 1}, {Field0: 0, Field1: 2}, {Field0: 0, Field1: 3}], [{Field0: 0, Field1: -1}, {Field0: 1, Field1: -1}, {Field0: 0, Field1: 1}], [{Field0: -1, Field1: -1}, {Field0: 0, Field1: -1}, {Field0: 0, Field1: 1}], [{Field0: 0, Field1: 1}, {Field0: 1, Field1: 0}, {Field0: 1, Field1: 1}], [{Field0: -1, Field1: 1}, {Field0: 0, Field1: 1}, {Field0: 1, Field1: 0}], [{Field0: -1, Field1: 0}, {Field0: 0, Field1: 1}, {Field0: 1, Field1: 1}], [{Field0: -1, Field1: 0}, {Field0: 0, Field1: 1}, {Field0: 1, Field1: 0}]];
function cstrToNimstr(c_2725079) {
      var ln = c_2725079.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_2725079.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_2725079.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

  
}
var ConstSet15 = setConstr(2);
var ConstSet16 = setConstr(2);
var ConstSet17 = setConstr(2);
var ConstSet18 = setConstr(2);
var ConstSet19 = setConstr(2);
var ConstSet20 = setConstr(2);
var ConstSet21 = setConstr(2);
var ConstSet22 = setConstr(2);
var ConstSet23 = setConstr(2);
var ConstSet24 = setConstr(2);
var ConstSet25 = setConstr(2);
var ConstSet26 = setConstr(2);
var ConstSet27 = setConstr(2);
var ConstSet28 = setConstr(2);
var ConstSet29 = setConstr(2);
var ConstSet30 = setConstr(2);
var ConstSet31 = setConstr(2);
var ConstSet32 = setConstr(2);
var ConstSet33 = setConstr(2);
var ConstSet34 = setConstr(2);
var ConstSet35 = setConstr(2);
var ConstSet36 = setConstr(2);
var ConstSet37 = setConstr(2);
var ConstSet38 = setConstr(2);
var ConstSet39 = setConstr(2);
function nimMin(a_2730803, b_2730804) {
    var Tmp1;

  var result_2730805 = 0;

  BeforeRet: do {
    if ((a_2730803 <= b_2730804)) {
    Tmp1 = a_2730803;
    }
    else {
    Tmp1 = b_2730804;
    }
    
    result_2730805 = Tmp1;
    break BeforeRet;
  } while (false);

  return result_2730805;

}
var ConstSet40 = setConstr(2);
var ConstSet41 = setConstr(2);
var ConstSet42 = setConstr(2);
var ConstSet43 = setConstr(2);
var ConstSet44 = setConstr(2);
var ConstSet45 = setConstr(2);
var ConstSet46 = setConstr(2);
var ConstSet47 = setConstr(2);
var ConstSet48 = setConstr(2);
var ConstSet49 = setConstr(2);
var ConstSet50 = setConstr(2);
var ConstSet51 = setConstr(2);
var ConstSet52 = setConstr(2);
var ConstSet53 = setConstr(2);
var ConstSet54 = setConstr(2);
var ConstSet55 = setConstr(2);
var ConstSet56 = setConstr(2);
var ConstSet57 = setConstr(2);
var ConstSet58 = setConstr(2);
var ConstSet59 = setConstr(2);
var ConstSet60 = setConstr(2);
var ConstSet61 = setConstr(2);
var ConstSet62 = setConstr(1);
var ConstSet63 = setConstr(2);
              var pieceColors_13785202 = ["rgba(0,0,0,0.0)", "rgba(0,127,255,1.0)", "rgba(0,0,255,1.0)", "rgba(255,127,0,1.0)", "rgba(255,255,0,1.0)", "rgba(0,255,127,1.0)", "rgba(255,0,0,1.0)", "rgba(255,0,255,1.0)"];
var ConstSet64 = setConstr(2);
var ConstSet65 = setConstr(2);
var ConstSet66 = setConstr(2);
var ConstSet67 = setConstr(2);
var ConstSet68 = setConstr(2);
var ConstSet69 = setConstr(2);
var ConstSet70 = setConstr(2);
var ConstSet71 = setConstr(2);
var ConstSet72 = setConstr(2);
var ConstSet73 = setConstr(2);
var ConstSet74 = setConstr(2);
var ConstSet75 = setConstr(2);
var ConstSet76 = setConstr(2);
if (!Math.trunc) {
  Math.trunc = function(v) {
    v = +v;
    if (!isFinite(v)) return v;
    return (v - v % 1) || (v < 0 ? -0 : v === 0 ? v : 0);
  };
}

var objectID_11670031 = [0];
var canvas_12550008 = document.getElementById("fup1");
var context_12550009 = canvas_12550008.getContext('2d');
var currentMusic_12550201 = [null];
var musicVolume_12550203 = [128];
var numTicks_12550204 = [0];
var fps_12550205 = [0];
var state_12566205 = [{a0: 1773455756, a1: 4275166512}];
if (globalThis.utcInstance_13160231 === undefined) {
  utcInstance_13160231 = [null];
}
if (globalThis.localInstance_13160232 === undefined) {
  localInstance_13160232 = [null];
}
function isFatPointer_2735401(ti_2735403) {
  var result_2735404 = false;

  BeforeRet: do {
    result_2735404 = !((ConstSet1[ti_2735403.base.kind] != undefined));
    break BeforeRet;
  } while (false);

  return result_2735404;

}
function nimCopyAux(dest_2740028, src_2740029, n_2740031) {
    switch (n_2740031.kind) {
    case 0:
      break;
    case 1:
            dest_2740028[n_2740031.offset] = nimCopy(dest_2740028[n_2740031.offset], src_2740029[n_2740031.offset], n_2740031.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_2740031.sons.length; i++) {
      nimCopyAux(dest_2740028, src_2740029, n_2740031.sons[i]);
    }
    
      break;
    case 3:
            dest_2740028[n_2740031.offset] = nimCopy(dest_2740028[n_2740031.offset], src_2740029[n_2740031.offset], n_2740031.typ);
      for (var i = 0; i < n_2740031.sons.length; ++i) {
        nimCopyAux(dest_2740028, src_2740029, n_2740031.sons[i][1]);
      }
    
      break;
    }

  
}
function add_2627211(x_2627214, x_2627214_Idx, y_2627215) {
          if (x_2627214[x_2627214_Idx] === null) { x_2627214[x_2627214_Idx] = []; }
      var off = x_2627214[x_2627214_Idx].length;
      x_2627214[x_2627214_Idx].length += y_2627215.length;
      for (var i = 0; i < y_2627215.length; ++i) {
        x_2627214[x_2627214_Idx][off+i] = y_2627215.charCodeAt(i);
      }
    

  
}
function newSeq_2725128(len_2725131) {
  var result_2725133 = [];

    result_2725133 = new Array(len_2725131); for (var i=0;i<len_2725131;++i) {result_2725133[i]=null;}
  return result_2725133;

}
function unhandledException(e_2685059) {
    var buf_2685060 = [[]];
    if (!(((e_2685059.message).length == 0))) {
    buf_2685060[0].push.apply(buf_2685060[0], makeNimstrLit("Error: unhandled exception: "));;
    buf_2685060[0].push.apply(buf_2685060[0], e_2685059.message);;
    }
    else {
    buf_2685060[0].push.apply(buf_2685060[0], makeNimstrLit("Error: unhandled exception"));;
    }
    
    buf_2685060[0].push.apply(buf_2685060[0], makeNimstrLit(" ["));;
    add_2627211(buf_2685060, 0, e_2685059.name);
    buf_2685060[0].push.apply(buf_2685060[0], makeNimstrLit("]\x0A"));;
    var cbuf_2690201 = toJSStr(buf_2685060[0]);
    framePtr = null;
      if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_2690201);
  }
  else {
    throw cbuf_2690201;
  }
  

  
}
function loadTexture_12522061(url_12522063) {
  var result_12522064 = null;

      result_12522064 = new Image();
  result_12522064.src = url_12522063;
  

  return result_12522064;

}
function len_13825289(x_13825294) {
  var result_13825295 = 0;

    result_13825295 = nimMax(0, ((x_13825294.b - x_13825294.a) + 1));

  return result_13825295;

}
function HEX2EHEX2E_13825223(a_13825228, b_13825230) {
  var result_13825236 = ({a: 0, b: 0});

    nimCopy(result_13825236, {a: a_13825228, b: b_13825230}, NTI13825233);

  return result_13825236;

}
function toFloat_2486659(i_2486661) {
  var result_2486662 = 0.0;

    result_2486662 = i_2486661;

  return result_2486662;

}
function HEX2F_2825648(x_2825650, y_2825651) {
  var result_2825652 = 0.0;

    result_2825652 = (toFloat_2486659(x_2825650) / toFloat_2486659(y_2825651));

  return result_2825652;

}
function epochTime_13730141() {
  var result_13730143 = 0.0;

    result_13730143 = HEX2F_2825648(new Date().getTime(), 1000);

  return result_13730143;

}
function sysFatal_2575418(message_2575422) {
    raiseException({message: nimCopy(null, message_2575422, NTI2456013), m_type: NTI2462641, parent: null, name: null, trace: [], up: null}, "AssertionDefect");

  
}
function raiseAssert_2575414(msg_2575416) {
    sysFatal_2575418(msg_2575416);

  
}
function failedAssertImpl_2575480(msg_2575482) {
    raiseAssert_2575414(msg_2575482);

  
}
function rotl_12566430(x_12566432, k_12566433) {
  var result_12566434 = 0;

    result_12566434 = ((x_12566432 << k_12566433) | ((x_12566432 >>> 0) >>> ((64 - k_12566433) >>> 0)));

  return result_12566434;

}
function next_12566458(r_12566461) {
  var result_12566462 = 0;

    var s0_12566463 = r_12566461.a0;
    var s1_12566464 = r_12566461.a1;
    result_12566462 = ((s0_12566463 + s1_12566464) >>> 0);
    s1_12566464 = (s1_12566464 ^ s0_12566463);
    r_12566461.a0 = ((rotl_12566430(s0_12566463, 55) ^ s1_12566464) ^ (s1_12566464 << 14));
    r_12566461.a1 = rotl_12566430(s1_12566464, 36);

  return result_12566462;

}
function initRand_12590214(seed_12590216) {
  var result_12590217 = [({a0: 0, a1: 0})];

    if (!(!((seed_12590216 == 0)))) {
    failedAssertImpl_2575480(makeNimstrLit("random.nim(568, 12) `seed != 0` "));
    }
    
    result_12590217[0].a0 = Math.floor(seed_12590216 / Math.pow(2,16));
    result_12590217[0].a1 = (seed_12590216 & 65535);
    var _ = next_12566458(result_12590217[0]);

  return result_12590217[0];

}
function randomize_12605222(seed_12605224) {
    nimCopy(state_12566205[0], initRand_12590214(seed_12605224), NTI12566202);

  
}
function randomize_13731001() {
    var time_13731203 = ((epochTime_13730141() * 1.0000000000000000e+003) & 2147483647);
    randomize_12605222(time_13731203);

  
}
function coord_13785422(x_13785424, y_13785425) {
  var result_13785426 = 0;

    result_13785426 = ((y_13785425 * 10) + x_13785424);

  return result_13785426;

}
function initPiece_13815032(kind_13815034) {
  var result_13815035 = ({kind: 0, pos: 0, rot: 0});

    result_13815035.kind = kind_13815034;
    result_13815035.pos = coord_13785422(-(minDims_13815214[kind_13815034]["Field0"]), -(minDims_13815214[kind_13815034]["Field1"]));

  return result_13815035;

}
function rand_12570049(r_12570052, max_12570053) {
  var result_12570054 = 0;

  BeforeRet: do {
    if ((max_12570053 == 0)) {
    break BeforeRet;
    }
    
    L1: do {
        L2: while (true) {
        if (!true) break L2;
          var x_12570055 = next_12566458(r_12570052);
          if ((x_12570055 <= ((4294967295 - (4294967295 % (max_12570053 >>> 0))) >>> 0))) {
          result_12570054 = (x_12570055 % ((max_12570053 + 1) ));
          break BeforeRet;
          }
          
        }
    } while(false);
  } while (false);

  return result_12570054;

}
function shuffle_13850009(r_13850012, x_13850015) {
    L1: do {
      var i_13850027 = 0;
      var colontmp__14446259 = 0;
      colontmp__14446259 = ((x_13850015).length-1);
      var res_14446260 = colontmp__14446259;
      L2: do {
          L3: while (true) {
          if (!(1 <= res_14446260)) break L3;
            i_13850027 = res_14446260;
            var j_13850028 = rand_12570049(r_13850012, i_13850027);
            var Tmp4 = x_13850015[i_13850027]; x_13850015[i_13850027] = x_13850015[j_13850028]; x_13850015[j_13850028] = Tmp4;            res_14446260 -= 1;
          }
      } while(false);
    } while(false);

  
}
function shuffle_13850003(x_13850008) {
    shuffle_13850009(state_12566205[0], x_13850008);

  
}
function randPieceKind_13825356(state_13825358) {
  var result_13825359 = 0;

    if ((state_13825358.randBufferPos == 7)) {
    state_13825358.randBufferPos = 0;
    nimCopy(state_13825358.randBuffer, [1, 2, 3, 4, 5, 6, 7], NTI13845001);
    shuffle_13850003(state_13825358.randBuffer);
    }
    
    result_13825359 = state_13825358.randBuffer[state_13825358.randBufferPos];
    state_13825358.randBufferPos += 1;

  return result_13825359;

}
function rand_13925054(r_13925057, x_13925059) {
  var result_13925060 = 0;

    result_13925060 = (rand_12570049(r_13925057, (((x_13925059.b)|0) - ((x_13925059.a)|0))) + ((x_13925059.a)|0));

  return result_13925060;

}
function rand_13925029(x_13925033) {
  var result_13925034 = 0;

    result_13925034 = rand_13925054(state_12566205[0], x_13925033);

  return result_13925034;

}
function rot_13787227(x_13787229, y_13787230, q_13787231) {
    var Tmp1;

  var result_13787233 = {Field0: 0, Field1: 0};

    switch (q_13787231) {
    case 0:
      Tmp1 = {Field0: x_13787229, Field1: y_13787230};
      break;
    case 1:
      Tmp1 = {Field0: y_13787230, Field1: -(x_13787229)};
      break;
    case 2:
      Tmp1 = {Field0: -(x_13787229), Field1: -(y_13787230)};
      break;
    case 3:
      Tmp1 = {Field0: -(y_13787230), Field1: x_13787229};
      break;
    }
    nimCopy(result_13787233, Tmp1, NTI13787232);

  return result_13787233;

}
function column_13785500(c_13785502) {
  var result_13785503 = 0;

    result_13785503 = Math.trunc(c_13785502 % 10);

  return result_13785503;

}
function row_13785517(c_13785519) {
  var result_13785520 = 0;

    result_13785520 = Math.trunc(c_13785519 / 10);

  return result_13785520;

}
function plusRot_13787251(a_13787253, x_13787254, y_13787255, q_13787256) {
  var result_13787258 = {Field0: 0, Field1: 0};

    var colontmp__14446291 = rot_13787227(x_13787254, y_13787255, q_13787256);
    var rotx_13787259 = colontmp__14446291["Field0"];
    var roty_13787260 = colontmp__14446291["Field1"];
    var colontmp__14446289 = (column_13785500(a_13787253) + rotx_13787259);
    var colontmp__14446290 = (row_13785517(a_13787253) + roty_13787260);
    nimCopy(result_13787258, {Field0: colontmp__14446289, Field1: colontmp__14446290}, NTI13787257);

  return result_13787258;

}
function overlaps_13815243(board_13815248, piece_13815249) {
  var result_13815250 = false;

  BeforeRet: do {
    result_13815250 = false;
    L1: do {
      var c_13815251 = 0;
      if (!((piece_13815249.kind == 0))) {
      c_13815251 = piece_13815249.pos;
      if (!((board_13815248[c_13815251] == 0))) {
      result_13815250 = true;
      break BeforeRet;
      }
      
      }
      
      L2: do {
        var x_14446280 = null;
        var x_14446280_Idx = 0;
        var y_14446281 = null;
        var y_14446281_Idx = 0;
        var colontmp__14446282 = [];
        colontmp__14446282 = pieceExtensions_13785367[piece_13815249.kind];
        var i_14446283 = 0;
        var L_14446284 = (colontmp__14446282).length;
        L3: do {
            L4: while (true) {
            if (!(i_14446283 < L_14446284)) break L4;
              x_14446280 = colontmp__14446282[i_14446283]; x_14446280_Idx = "Field0";
              y_14446281 = colontmp__14446282[i_14446283]; y_14446281_Idx = "Field1";
              var colontmp__14446288 = plusRot_13787251(piece_13815249.pos, x_14446280[x_14446280_Idx], y_14446281[y_14446281_Idx], piece_13815249.rot);
              var c_14446286 = colontmp__14446288["Field0"];
              var r_14446287 = colontmp__14446288["Field1"];
              c_13815251 = coord_13785422(c_14446286, r_14446287);
              if (!((board_13815248[c_13815251] == 0))) {
              result_13815250 = true;
              break BeforeRet;
              }
              
              i_14446283 += 1;
            }
        } while(false);
      } while(false);
    } while(false);
  } while (false);

  return result_13815250;

}
function spawnPiece_13910084(state_13910086, initial_13910087) {
    var Tmp1;

    nimCopy(state_13910086.piece, initial_13910087, NTI13785377);
    if ((state_13910086.piece.kind == 0)) {
    state_13910086.piece.kind = rand_13925029(HEX2EHEX2E_13825223(1, 7));
    }
    
    if ((ConstSet14[state_13910086.piece.kind] != undefined)) {
    Tmp1 = 11;
    }
    else {
    Tmp1 = 10;
    }
    
    state_13910086.piece.pos = coord_13785422(5, Tmp1);
    L2: do {
        L3: while (true) {
        if (!overlaps_13815243(state_13910086.board, state_13910086.piece)) break L3;
          state_13910086.piece.pos = (state_13910086.piece.pos - 10);
        }
    } while(false);
    state_13910086.pieceDropTick = 0;

  
}
function sysFatal_13900837(message_13900841) {
    raiseException({message: nimCopy(null, message_13900841, NTI2456013), m_type: NTI2462653, parent: null, name: null, trace: [], up: null}, "RangeDefect");

  
}
function HEX5BHEX5DHEX3D_13900508(a_13900516, x_13900518, b_13900520) {
    var xa_13900601 = x_13900518.a;
    var L_13900822 = (((4 - x_13900518.b) - xa_13900601) + 1);
    if ((L_13900822 == (b_13900520).length)) {
    L1: do {
      var i_13900834 = 0;
      var i_14446300 = 0;
      L2: do {
          L3: while (true) {
          if (!(i_14446300 < L_13900822)) break L3;
            i_13900834 = i_14446300;
            nimCopy(a_13900516[(i_13900834 + xa_13900601)], b_13900520[i_13900834], NTI13785377);
            i_14446300 += 1;
          }
      } while(false);
    } while(false);
    }
    else {
    sysFatal_13900837(makeNimstrLit("different lengths for slice assignment"));
    }
    

  
}
function HEX2EHEX2E_7110001(a_7110006, b_7110008) {
  var result_7110014 = ({a: 0, b: 0});

    nimCopy(result_7110014, {a: a_7110006, b: b_7110008}, NTI7110011);

  return result_7110014;

}
function newSeq_13900424(len_13900427) {
  var result_13900429 = [];

    result_13900429 = new Array(len_13900427); for (var i=0;i<len_13900427;++i) {result_13900429[i]=({kind: 0, pos: 0, rot: 0});}
  return result_13900429;

}
function HEX5BHEX5D_13900029(a_13900036, x_13900038) {
  var result_13900040 = [];

    var xa_13900201 = x_13900038.a;
    var L_13900422 = (((4 - x_13900038.b) - xa_13900201) + 1);
    result_13900040 = nimCopy(null, newSeq_13900424(L_13900422), NTI13900428);
    L1: do {
      var i_13900472 = 0;
      var i_14446308 = 0;
      L2: do {
          L3: while (true) {
          if (!(i_14446308 < L_13900422)) break L3;
            i_13900472 = i_14446308;
            nimCopy(result_13900040[i_13900472], a_13900036[(i_13900472 + xa_13900201)], NTI13785377);
            i_14446308 += 1;
          }
      } while(false);
    } while(false);

  return result_13900040;

}
function HEX5BHEX5DHEX3D_13910003(a_13910009, i_13910010, x_13910011) {
    nimCopy(a_13910009[((4 - i_13910010) + 0)], x_13910011, NTI13785377);

  
}
function nextPiece_13865062(state_13865064) {
  var result_13865065 = ({kind: 0, pos: 0, rot: 0});

    nimCopy(result_13865065, state_13865064.nextPieces[0], NTI13785377);
    HEX5BHEX5DHEX3D_13900508(state_13865064.nextPieces, HEX2EHEX2E_7110001(0, 2), HEX5BHEX5D_13900029(state_13865064.nextPieces, HEX2EHEX2E_7110001(1, 1)));
    HEX5BHEX5DHEX3D_13910003(state_13865064.nextPieces, 1, initPiece_13815032(randPieceKind_13825356(state_13865064)));

  return result_13865065;

}
function setMusic_12522091(music_12522094, music_12522094_Idx, file_12522095) {
    if (!((music_12522094[music_12522094_Idx] == null))) {
    music_12522094[music_12522094_Idx].pause();
    music_12522094[music_12522094_Idx] = null;
    }
    
    music_12522094[music_12522094_Idx] = new Audio(file_12522095);

  
}
function init_14060078(state_14060080) {
      var Tmp1;
      var Tmp2;
      var Tmp3;
      var Tmp4;
      var Tmp5;
      var Tmp6;
      var Tmp7;
      var Tmp8;
      var Tmp9;
              var Tmp13;
              var Tmp14;
              var Tmp15;
      var Tmp16;

    switch (state_14060080.kind) {
    case 1:
      var Tmp1 = state_14060080;
      if (ConstSet2[Tmp1.kind]===undefined) { raiseFieldError(makeNimstrLit("\'initial\' is not accessible using discriminant \'kind\' of type \'GameObj\'")); }
      Tmp1.initial.background = loadTexture_12522061("assets/mainmenu.png");
      break;
    case 2:
      var Tmp2 = state_14060080;
      if (ConstSet3[Tmp2.kind]===undefined) { raiseFieldError(makeNimstrLit("\'tetris\' is not accessible using discriminant \'kind\' of type \'GameObj\'")); }
      Tmp2.tetris.pieceDropTicking = true;
      var Tmp3 = state_14060080;
      if (ConstSet4[Tmp3.kind]===undefined) { raiseFieldError(makeNimstrLit("\'tetris\' is not accessible using discriminant \'kind\' of type \'GameObj\'")); }
      Tmp3.tetris.pieceDropTick = 0;
      var Tmp4 = state_14060080;
      if (ConstSet5[Tmp4.kind]===undefined) { raiseFieldError(makeNimstrLit("\'tetris\' is not accessible using discriminant \'kind\' of type \'GameObj\'")); }
      Tmp4.tetris.pieceDropTime = 120;
      var Tmp5 = state_14060080;
      if (ConstSet6[Tmp5.kind]===undefined) { raiseFieldError(makeNimstrLit("\'tetris\' is not accessible using discriminant \'kind\' of type \'GameObj\'")); }
      Tmp5.tetris.pieceDropTickMultiplier = 1;
      var Tmp6 = state_14060080;
      if (ConstSet7[Tmp6.kind]===undefined) { raiseFieldError(makeNimstrLit("\'tetris\' is not accessible using discriminant \'kind\' of type \'GameObj\'")); }
      Tmp6.tetris.pieceDropRetry = 0;
      var Tmp7 = state_14060080;
      if (ConstSet8[Tmp7.kind]===undefined) { raiseFieldError(makeNimstrLit("\'tetris\' is not accessible using discriminant \'kind\' of type \'GameObj\'")); }
      Tmp7.tetris.pieceDropRetries = 1;
      var Tmp8 = state_14060080;
      if (ConstSet9[Tmp8.kind]===undefined) { raiseFieldError(makeNimstrLit("\'tetris\' is not accessible using discriminant \'kind\' of type \'GameObj\'")); }
      Tmp8.tetris.justHeld = false;
      var Tmp9 = state_14060080;
      if (ConstSet10[Tmp9.kind]===undefined) { raiseFieldError(makeNimstrLit("\'tetris\' is not accessible using discriminant \'kind\' of type \'GameObj\'")); }
      Tmp9.tetris.randBufferPos = len_13825289(HEX2EHEX2E_13825223(1, 7));
      randomize_13731001();
      L10: do {
        var np_14065052 = null;
        var i_14446250 = 0;
        if ((i_14446250 <= 3)) {
        L11: do {
            L12: while (true) {
            if (!true) break L12;
              var Tmp13 = state_14060080;
              if (ConstSet11[Tmp13.kind]===undefined) { raiseFieldError(makeNimstrLit("\'tetris\' is not accessible using discriminant \'kind\' of type \'GameObj\'")); }
              np_14065052 = (Tmp14 = Tmp13.tetris.nextPieces, Tmp14)[i_14446250];
              var Tmp15 = state_14060080;
              if (ConstSet12[Tmp15.kind]===undefined) { raiseFieldError(makeNimstrLit("\'tetris\' is not accessible using discriminant \'kind\' of type \'GameObj\'")); }
              nimCopy(np_14065052, initPiece_13815032(randPieceKind_13825356(Tmp15.tetris)), NTI13785377);
              if ((3 <= i_14446250)) {
              break L11;
              }
              
              i_14446250 += 1;
            }
        } while(false);
        }
        
      } while(false);
      var Tmp16 = state_14060080;
      if (ConstSet13[Tmp16.kind]===undefined) { raiseFieldError(makeNimstrLit("\'tetris\' is not accessible using discriminant \'kind\' of type \'GameObj\'")); }
      var HEX3Atmp_14065057 = Tmp16.tetris;
      spawnPiece_13910084(HEX3Atmp_14065057, nextPiece_13865062(HEX3Atmp_14065057));
      setMusic_12522091(currentMusic_12550201, 0, "assets/music.ogg");
      var mHEX60gensym237_14070001 = currentMusic_12550201[0];
      mHEX60gensym237_14070001.loop = true;
      mHEX60gensym237_14070001.play();
      break;
    case 3:
      break;
    default: 
      break;
    }

  
}
var game_14300401 = [{kind: 1, initial: ({background: null}), tetris: ({board: arrayConstr(300, 0, NTI13745013), nextPieces: [({kind: 0, pos: 0, rot: 0}), ({kind: 0, pos: 0, rot: 0}), ({kind: 0, pos: 0, rot: 0}), ({kind: 0, pos: 0, rot: 0})], piece: ({kind: 0, pos: 0, rot: 0}), pieceDropTicking: false, pieceDropTick: 0, pieceDropTime: 0, pieceDropTickMultiplier: 0, pieceDropRetry: 0, pieceDropRetries: 0, holdPiece: ({kind: 0, pos: 0, rot: 0}), justHeld: false, randBuffer: [0, 0, 0, 0, 0, 0, 0], randBufferPos: 0})}];
init_14060078(game_14300401[0]);
window.requestAnimationFrame =
  window.requestAnimationFrame ||
    window.webkitRequestAnimationFrame ||
    window.mozRequestAnimationFrame ||
    ((cb) => window.setTimeout(callback, 1000 / 60));

function finish_14070066(state_14070068) {
    switch (state_14070068.kind) {
    case 1:
      break;
    case 2:
      currentMusic_12550201[0].pause();
      currentMusic_12550201[0] = null;
      break;
    case 3:
      break;
    default: 
      break;
    }

  
}
function contains_13805075(s_13805081, value_13805082) {
    var Tmp1;

  var result_13805083 = false;

    if (!(s_13805081.a <= value_13805082)) Tmp1 = false; else {      Tmp1 = (value_13805082 <= s_13805081.b);    }    result_13805083 = Tmp1;

  return result_13805083;

}
function HEX2EHEX2E_13805019(a_13805024, b_13805026) {
  var result_13805032 = ({a: 0, b: 0});

    nimCopy(result_13805032, {a: nimCopy(null, a_13805024, NTI13785371), b: nimCopy(null, b_13805026, NTI13785371)}, NTI13805029);

  return result_13805032;

}
function contains_13805002(x_13805007) {
  var result_13805008 = false;

    result_13805008 = contains_13805075(HEX2EHEX2E_13805019(0, 9), x_13805007);

  return result_13805008;

}
function contains_13810075(s_13810081, value_13810082) {
    var Tmp1;

  var result_13810083 = false;

    if (!(s_13810081.a <= value_13810082)) Tmp1 = false; else {      Tmp1 = (value_13810082 <= s_13810081.b);    }    result_13810083 = Tmp1;

  return result_13810083;

}
function HEX2EHEX2E_13810019(a_13810024, b_13810026) {
  var result_13810032 = ({a: 0, b: 0});

    nimCopy(result_13810032, {a: nimCopy(null, a_13810024, NTI13785373), b: nimCopy(null, b_13810026, NTI13785373)}, NTI13810029);

  return result_13810032;

}
function contains_13810002(x_13810007) {
  var result_13810008 = false;

    result_13810008 = contains_13810075(HEX2EHEX2E_13810019(0, 29), x_13810007);

  return result_13810008;

}
function rotate_13965014(state_13965016, forward_13965017) {
    var Tmp1;
    var Tmp2;
      var Tmp3;

  BeforeRet: do {
    var oldRot_13970001 = state_13965016.piece.rot;
    if (forward_13965017) {
    if ((oldRot_13970001 == 3)) {
    Tmp2 = 0;
    }
    else {
    Tmp2 = (oldRot_13970001 + 1);
    }
    
    Tmp1 = Tmp2;
    }
    else {
      if ((oldRot_13970001 == 0)) {
      Tmp3 = 3;
      }
      else {
      Tmp3 = (oldRot_13970001 - 1);
      }
      
    Tmp1 = Tmp3;
    }
    
    var newRot_13970026 = Tmp1;
    var newPiece_13975001 = nimCopy(null, state_13965016.piece, NTI13785377);
    newPiece_13975001.rot = newRot_13970026;
    var outOfBounds_13975002 = [false];
    L4: do {
      var __13975004 = 0;
      if (!((newPiece_13975001.kind == 0))) {
      __13975004 = newPiece_13975001.pos;
      }
      
      L5: do {
        var x_14955844 = null;
        var x_14955844_Idx = 0;
        var y_14955845 = null;
        var y_14955845_Idx = 0;
        var colontmp__14955846 = [];
        colontmp__14955846 = pieceExtensions_13785367[newPiece_13975001.kind];
        var i_14955847 = 0;
        var L_14955848 = (colontmp__14955846).length;
        L6: do {
            L7: while (true) {
            if (!(i_14955847 < L_14955848)) break L7;
              x_14955844 = colontmp__14955846[i_14955847]; x_14955844_Idx = "Field0";
              y_14955845 = colontmp__14955846[i_14955847]; y_14955845_Idx = "Field1";
              var colontmp__14955883 = plusRot_13787251(newPiece_13975001.pos, x_14955844[x_14955844_Idx], y_14955845[y_14955845_Idx], newPiece_13975001.rot);
              var col_14955850 = colontmp__14955883["Field0"];
              var row_14955851 = colontmp__14955883["Field1"];
              if ((contains_13805002(col_14955850) && contains_13810002(row_14955851))) {
              __13975004 = coord_13785422(col_14955850, row_14955851);
              }
              else {
                outOfBounds_13975002[0] = true;
                break L5;
              }
              
              i_14955847 += 1;
            }
        } while(false);
      } while(false);
    } while(false);
    var i_13975006 = 1;
    L8: do {
        L9: while (true) {
        if (!outOfBounds_13975002[0]) break L9;
          outOfBounds_13975002[0] = false;
          var colontmp__14955888 = {Field0: column_13785500(newPiece_13975001.pos), Field1: row_13785517(newPiece_13975001.pos)};
          var col0_13975008 = colontmp__14955888["Field0"];
          var row0_13975009 = colontmp__14955888["Field1"];
          var oneInside_13975010 = false;
          if (contains_13805002((col0_13975008 - i_13975006))) {
          oneInside_13975010 = true;
          newPiece_13975001.pos = coord_13785422((col0_13975008 - i_13975006), row0_13975009);
          L10: do {
            var __13980009 = 0;
            if (!((newPiece_13975001.kind == 0))) {
            __13980009 = newPiece_13975001.pos;
            }
            
            L11: do {
              var x_14955858 = null;
              var x_14955858_Idx = 0;
              var y_14955859 = null;
              var y_14955859_Idx = 0;
              var colontmp__14955860 = [];
              colontmp__14955860 = pieceExtensions_13785367[newPiece_13975001.kind];
              var i_14955861 = 0;
              var L_14955862 = (colontmp__14955860).length;
              L12: do {
                  L13: while (true) {
                  if (!(i_14955861 < L_14955862)) break L13;
                    x_14955858 = colontmp__14955860[i_14955861]; x_14955858_Idx = "Field0";
                    y_14955859 = colontmp__14955860[i_14955861]; y_14955859_Idx = "Field1";
                    var colontmp__14955889 = plusRot_13787251(newPiece_13975001.pos, x_14955858[x_14955858_Idx], y_14955859[y_14955859_Idx], newPiece_13975001.rot);
                    var col_14955864 = colontmp__14955889["Field0"];
                    var row_14955865 = colontmp__14955889["Field1"];
                    if ((contains_13805002(col_14955864) && contains_13810002(row_14955865))) {
                    __13980009 = coord_13785422(col_14955864, row_14955865);
                    }
                    else {
                      outOfBounds_13975002[0] = true;
                      break L11;
                    }
                    
                    i_14955861 += 1;
                  }
              } while(false);
            } while(false);
          } while(false);
          }
          else {
            outOfBounds_13975002[0] = true;
          }
          
          if (outOfBounds_13975002[0]) {
          outOfBounds_13975002[0] = false;
          if (contains_13805002((col0_13975008 + i_13975006))) {
          oneInside_13975010 = true;
          newPiece_13975001.pos = coord_13785422((col0_13975008 + i_13975006), row0_13975009);
          L14: do {
            var __13985009 = 0;
            if (!((newPiece_13975001.kind == 0))) {
            __13985009 = newPiece_13975001.pos;
            }
            
            L15: do {
              var x_14955871 = null;
              var x_14955871_Idx = 0;
              var y_14955872 = null;
              var y_14955872_Idx = 0;
              var colontmp__14955873 = [];
              colontmp__14955873 = pieceExtensions_13785367[newPiece_13975001.kind];
              var i_14955874 = 0;
              var L_14955875 = (colontmp__14955873).length;
              L16: do {
                  L17: while (true) {
                  if (!(i_14955874 < L_14955875)) break L17;
                    x_14955871 = colontmp__14955873[i_14955874]; x_14955871_Idx = "Field0";
                    y_14955872 = colontmp__14955873[i_14955874]; y_14955872_Idx = "Field1";
                    var colontmp__14955890 = plusRot_13787251(newPiece_13975001.pos, x_14955871[x_14955871_Idx], y_14955872[y_14955872_Idx], newPiece_13975001.rot);
                    var col_14955877 = colontmp__14955890["Field0"];
                    var row_14955878 = colontmp__14955890["Field1"];
                    if ((contains_13805002(col_14955877) && contains_13810002(row_14955878))) {
                    __13985009 = coord_13785422(col_14955877, row_14955878);
                    }
                    else {
                      outOfBounds_13975002[0] = true;
                      break L15;
                    }
                    
                    i_14955874 += 1;
                  }
              } while(false);
            } while(false);
          } while(false);
          }
          else {
            outOfBounds_13975002[0] = true;
          }
          
          }
          
          if (oneInside_13975010) {
          i_13975006 += 1;
          }
          else {
            break L8;
          }
          
        }
    } while(false);
    if (outOfBounds_13975002[0]) {
    break BeforeRet;
    }
    
    L18: do {
        L19: while (true) {
        if (!overlaps_13815243(state_13965016.board, newPiece_13975001)) break L19;
          newPiece_13975001.pos = (newPiece_13975001.pos - 10);
        }
    } while(false);
    nimCopy(state_13965016.piece, newPiece_13975001, NTI13785377);
  } while (false);

  
}
function drop_13995014(state_13995016, spawned_13995018, spawned_13995018_Idx) {
    var newPiece_14000001 = nimCopy(null, state_13995016.piece, NTI13785377);
    var maxRow_14000003 = 0;
    L1: do {
      var c_14005001 = 0;
      if (!((state_13995016.piece.kind == 0))) {
      c_14005001 = state_13995016.piece.pos;
      if ((maxRow_14000003 < row_13785517(c_14005001))) {
      maxRow_14000003 = row_13785517(c_14005001);
      }
      
      }
      
      L2: do {
        var x_14955894 = null;
        var x_14955894_Idx = 0;
        var y_14955895 = null;
        var y_14955895_Idx = 0;
        var colontmp__14955896 = [];
        colontmp__14955896 = pieceExtensions_13785367[state_13995016.piece.kind];
        var i_14955897 = 0;
        var L_14955898 = (colontmp__14955896).length;
        L3: do {
            L4: while (true) {
            if (!(i_14955897 < L_14955898)) break L4;
              x_14955894 = colontmp__14955896[i_14955897]; x_14955894_Idx = "Field0";
              y_14955895 = colontmp__14955896[i_14955897]; y_14955895_Idx = "Field1";
              var colontmp__14955914 = plusRot_13787251(state_13995016.piece.pos, x_14955894[x_14955894_Idx], y_14955895[y_14955895_Idx], state_13995016.piece.rot);
              var c_14955900 = colontmp__14955914["Field0"];
              var r_14955901 = colontmp__14955914["Field1"];
              c_14005001 = coord_13785422(c_14955900, r_14955901);
              if ((maxRow_14000003 < row_13785517(c_14005001))) {
              maxRow_14000003 = row_13785517(c_14005001);
              }
              
              i_14955897 += 1;
            }
        } while(false);
      } while(false);
    } while(false);
    if ((maxRow_14000003 == 29)) {
    spawned_13995018[spawned_13995018_Idx] = true;
    }
    else {
      newPiece_14000001.pos = (newPiece_14000001.pos + 10);
      spawned_13995018[spawned_13995018_Idx] = overlaps_13815243(state_13995016.board, newPiece_14000001);
    }
    
    if (spawned_13995018[spawned_13995018_Idx]) {
    if ((state_13995016.pieceDropRetry < state_13995016.pieceDropRetries)) {
    state_13995016.pieceDropRetry += 1;
    }
    else {
      state_13995016.pieceDropRetry = 0;
      state_13995016.justHeld = false;
      L5: do {
        var c_14045001 = 0;
        if (!((state_13995016.piece.kind == 0))) {
        c_14045001 = state_13995016.piece.pos;
        state_13995016.board[c_14045001] = state_13995016.piece.kind;
        }
        
        L6: do {
          var x_14955906 = null;
          var x_14955906_Idx = 0;
          var y_14955907 = null;
          var y_14955907_Idx = 0;
          var colontmp__14955908 = [];
          colontmp__14955908 = pieceExtensions_13785367[state_13995016.piece.kind];
          var i_14955909 = 0;
          var L_14955910 = (colontmp__14955908).length;
          L7: do {
              L8: while (true) {
              if (!(i_14955909 < L_14955910)) break L8;
                x_14955906 = colontmp__14955908[i_14955909]; x_14955906_Idx = "Field0";
                y_14955907 = colontmp__14955908[i_14955909]; y_14955907_Idx = "Field1";
                var colontmp__14955915 = plusRot_13787251(state_13995016.piece.pos, x_14955906[x_14955906_Idx], y_14955907[y_14955907_Idx], state_13995016.piece.rot);
                var c_14955912 = colontmp__14955915["Field0"];
                var r_14955913 = colontmp__14955915["Field1"];
                c_14045001 = coord_13785422(c_14955912, r_14955913);
                state_13995016.board[c_14045001] = state_13995016.piece.kind;
                i_14955909 += 1;
              }
          } while(false);
        } while(false);
      } while(false);
      spawnPiece_13910084(state_13995016, nextPiece_13865062(state_13995016));
    }
    
    }
    else {
      nimCopy(state_13995016.piece, newPiece_14000001, NTI13785377);
    }
    

  
}
function setVolume_12525043(music_12525045, vol_12525046) {
    var vol2_12525048 = HEX2F_2825648(vol_12525046, 128);
    music_12525045.volume = vol2_12525048

  
}
function key_14085024(state_14085026, event_14085027) {
        var Tmp1;
        var Tmp2;
        var Tmp3;
        var Tmp4;
        var Tmp5;
          var Tmp6;
        var Tmp7;
        var Tmp8;
          var Tmp9;
        var Tmp10;
          var Tmp11;
        var Tmp12;
        var Tmp13;
        var Tmp14;
        var Tmp15;
          var Tmp17;
        var Tmp21;
        var Tmp22;
        var Tmp23;
        var Tmp24;
        var Tmp25;
        var Tmp26;
        var Tmp27;
        var Tmp28;
              var Tmp31;
        var Tmp32;
        var Tmp33;
        var Tmp34;
        var Tmp35;

    switch (state_14085026.kind) {
    case 1:
        if (event_14085027.ctrlKey) Tmp3 = true; else {          Tmp3 = event_14085027.metaKey;        }        if (Tmp3) Tmp2 = true; else {          Tmp2 = event_14085027.shiftKey;        }        if (Tmp2) Tmp1 = true; else {          Tmp1 = event_14085027.altKey;        }      if (!(Tmp1)) {
      switch (toJSStr(cstrToNimstr(event_14085027.key))) {
      case "Escape":
        break;
      default: 
        finish_14070066(state_14085026);
        nimCopy(state_14085026, {kind: 2, initial: ({background: null}), tetris: ({board: arrayConstr(300, 0, NTI13745013), nextPieces: [({kind: 0, pos: 0, rot: 0}), ({kind: 0, pos: 0, rot: 0}), ({kind: 0, pos: 0, rot: 0}), ({kind: 0, pos: 0, rot: 0})], piece: ({kind: 0, pos: 0, rot: 0}), pieceDropTicking: false, pieceDropTick: 0, pieceDropTime: 0, pieceDropTickMultiplier: 0, pieceDropRetry: 0, pieceDropRetries: 0, holdPiece: ({kind: 0, pos: 0, rot: 0}), justHeld: false, randBuffer: [0, 0, 0, 0, 0, 0, 0], randBufferPos: 0})}, NTI14060072);
        init_14060078(state_14085026);
        break;
      }
      }
      
      break;
    case 2:
      switch (toJSStr(cstrToNimstr(event_14085027.key))) {
      case "x":
        var Tmp4 = state_14085026;
        if (ConstSet15[Tmp4.kind]===undefined) { raiseFieldError(makeNimstrLit("\'tetris\' is not accessible using discriminant \'kind\' of type \'GameObj\'")); }
        rotate_13965014(Tmp4.tetris, true);
        break;
      case "z":
        var Tmp5 = state_14085026;
        if (ConstSet16[Tmp5.kind]===undefined) { raiseFieldError(makeNimstrLit("\'tetris\' is not accessible using discriminant \'kind\' of type \'GameObj\'")); }
        rotate_13965014(Tmp5.tetris, false);
        break;
      case "c":
          var Tmp6 = state_14085026;
          if (ConstSet17[Tmp6.kind]===undefined) { raiseFieldError(makeNimstrLit("\'tetris\' is not accessible using discriminant \'kind\' of type \'GameObj\'")); }
        if (!(Tmp6.tetris.justHeld)) {
        var Tmp7 = state_14085026;
        if (ConstSet18[Tmp7.kind]===undefined) { raiseFieldError(makeNimstrLit("\'tetris\' is not accessible using discriminant \'kind\' of type \'GameObj\'")); }
        Tmp7.tetris.justHeld = true;
          var Tmp9 = state_14085026;
          if (ConstSet19[Tmp9.kind]===undefined) { raiseFieldError(makeNimstrLit("\'tetris\' is not accessible using discriminant \'kind\' of type \'GameObj\'")); }
        if (!((Tmp9.tetris.holdPiece.kind == 0))) {
        var Tmp10 = state_14085026;
        if (ConstSet20[Tmp10.kind]===undefined) { raiseFieldError(makeNimstrLit("\'tetris\' is not accessible using discriminant \'kind\' of type \'GameObj\'")); }
        Tmp8 = Tmp10.tetris.holdPiece;
        }
        else {
          var Tmp11 = state_14085026;
          if (ConstSet21[Tmp11.kind]===undefined) { raiseFieldError(makeNimstrLit("\'tetris\' is not accessible using discriminant \'kind\' of type \'GameObj\'")); }
        Tmp8 = nextPiece_13865062(Tmp11.tetris);
        }
        
        var oldHoldPiece_14130004 = nimCopy(null, Tmp8, NTI13785377);
        var Tmp12 = state_14085026;
        if (ConstSet22[Tmp12.kind]===undefined) { raiseFieldError(makeNimstrLit("\'tetris\' is not accessible using discriminant \'kind\' of type \'GameObj\'")); }
        var Tmp13 = state_14085026;
        if (ConstSet23[Tmp13.kind]===undefined) { raiseFieldError(makeNimstrLit("\'tetris\' is not accessible using discriminant \'kind\' of type \'GameObj\'")); }
        nimCopy(Tmp12.tetris.holdPiece, Tmp13.tetris.piece, NTI13785377);
        var Tmp14 = state_14085026;
        if (ConstSet24[Tmp14.kind]===undefined) { raiseFieldError(makeNimstrLit("\'tetris\' is not accessible using discriminant \'kind\' of type \'GameObj\'")); }
        var minX_14145002 = column_13785500(Tmp14.tetris.holdPiece.pos);
        var Tmp15 = state_14085026;
        if (ConstSet25[Tmp15.kind]===undefined) { raiseFieldError(makeNimstrLit("\'tetris\' is not accessible using discriminant \'kind\' of type \'GameObj\'")); }
        var minY_14150002 = row_13785517(Tmp15.tetris.holdPiece.pos);
        L16: do {
          var c_14155002 = 0;
          var colontmp__14955817 = ({kind: 0, pos: 0, rot: 0});
          var Tmp17 = state_14085026;
          if (ConstSet26[Tmp17.kind]===undefined) { raiseFieldError(makeNimstrLit("\'tetris\' is not accessible using discriminant \'kind\' of type \'GameObj\'")); }
          nimCopy(colontmp__14955817, Tmp17.tetris.holdPiece, NTI13785377);
          if (!((colontmp__14955817.kind == 0))) {
          c_14155002 = colontmp__14955817.pos;
          if ((column_13785500(c_14155002) < minX_14145002)) {
          minX_14145002 = column_13785500(c_14155002);
          }
          
          if ((row_13785517(c_14155002) < minY_14150002)) {
          minY_14150002 = row_13785517(c_14155002);
          }
          
          }
          
          L18: do {
            var x_14955819 = null;
            var x_14955819_Idx = 0;
            var y_14955820 = null;
            var y_14955820_Idx = 0;
            var colontmp__14955821 = [];
            colontmp__14955821 = pieceExtensions_13785367[colontmp__14955817.kind];
            var i_14955822 = 0;
            var L_14955823 = (colontmp__14955821).length;
            L19: do {
                L20: while (true) {
                if (!(i_14955822 < L_14955823)) break L20;
                  x_14955819 = colontmp__14955821[i_14955822]; x_14955819_Idx = "Field0";
                  y_14955820 = colontmp__14955821[i_14955822]; y_14955820_Idx = "Field1";
                  var colontmp__14955891 = plusRot_13787251(colontmp__14955817.pos, x_14955819[x_14955819_Idx], y_14955820[y_14955820_Idx], colontmp__14955817.rot);
                  var c_14955825 = colontmp__14955891["Field0"];
                  var r_14955826 = colontmp__14955891["Field1"];
                  c_14155002 = coord_13785422(c_14955825, r_14955826);
                  if ((column_13785500(c_14155002) < minX_14145002)) {
                  minX_14145002 = column_13785500(c_14155002);
                  }
                  
                  if ((row_13785517(c_14155002) < minY_14150002)) {
                  minY_14150002 = row_13785517(c_14155002);
                  }
                  
                  i_14955822 += 1;
                }
            } while(false);
          } while(false);
        } while(false);
        var Tmp21 = state_14085026;
        if (ConstSet27[Tmp21.kind]===undefined) { raiseFieldError(makeNimstrLit("\'tetris\' is not accessible using discriminant \'kind\' of type \'GameObj\'")); }
        var Tmp22 = state_14085026;
        if (ConstSet28[Tmp22.kind]===undefined) { raiseFieldError(makeNimstrLit("\'tetris\' is not accessible using discriminant \'kind\' of type \'GameObj\'")); }
        var Tmp23 = state_14085026;
        if (ConstSet29[Tmp23.kind]===undefined) { raiseFieldError(makeNimstrLit("\'tetris\' is not accessible using discriminant \'kind\' of type \'GameObj\'")); }
        Tmp21.tetris.holdPiece.pos = coord_13785422((column_13785500(Tmp22.tetris.holdPiece.pos) - minX_14145002), (row_13785517(Tmp23.tetris.holdPiece.pos) - minY_14150002));
        var Tmp24 = state_14085026;
        if (ConstSet30[Tmp24.kind]===undefined) { raiseFieldError(makeNimstrLit("\'tetris\' is not accessible using discriminant \'kind\' of type \'GameObj\'")); }
        spawnPiece_13910084(Tmp24.tetris, oldHoldPiece_14130004);
        }
        
        break;
      case "ArrowDown":
      case "Down":
        var Tmp25 = state_14085026;
        if (ConstSet31[Tmp25.kind]===undefined) { raiseFieldError(makeNimstrLit("\'tetris\' is not accessible using discriminant \'kind\' of type \'GameObj\'")); }
        Tmp25.tetris.pieceDropTime = 10;
        var Tmp26 = state_14085026;
        if (ConstSet32[Tmp26.kind]===undefined) { raiseFieldError(makeNimstrLit("\'tetris\' is not accessible using discriminant \'kind\' of type \'GameObj\'")); }
        Tmp26.tetris.pieceDropRetries = 3;
        break;
      case "ArrowUp":
      case "Up":
        var Tmp27 = state_14085026;
        if (ConstSet33[Tmp27.kind]===undefined) { raiseFieldError(makeNimstrLit("\'tetris\' is not accessible using discriminant \'kind\' of type \'GameObj\'")); }
        var Tmp28 = state_14085026;
        if (ConstSet34[Tmp28.kind]===undefined) { raiseFieldError(makeNimstrLit("\'tetris\' is not accessible using discriminant \'kind\' of type \'GameObj\'")); }
        Tmp27.tetris.pieceDropRetry = Tmp28.tetris.pieceDropRetries;
        var spawned_14190002 = [false];
        L29: do {
            L30: while (true) {
            if (!!(spawned_14190002[0])) break L30;
              var Tmp31 = state_14085026;
              if (ConstSet35[Tmp31.kind]===undefined) { raiseFieldError(makeNimstrLit("\'tetris\' is not accessible using discriminant \'kind\' of type \'GameObj\'")); }
              drop_13995014(Tmp31.tetris, spawned_14190002, 0);
            }
        } while(false);
        var Tmp32 = state_14085026;
        if (ConstSet36[Tmp32.kind]===undefined) { raiseFieldError(makeNimstrLit("\'tetris\' is not accessible using discriminant \'kind\' of type \'GameObj\'")); }
        Tmp32.tetris.pieceDropTick = 0;
        break;
      case "d":
        var Tmp33 = state_14085026;
        if (ConstSet37[Tmp33.kind]===undefined) { raiseFieldError(makeNimstrLit("\'tetris\' is not accessible using discriminant \'kind\' of type \'GameObj\'")); }
        Tmp33.tetris.pieceDropTickMultiplier += 1;
        break;
      case "s":
        var Tmp34 = state_14085026;
        if (ConstSet38[Tmp34.kind]===undefined) { raiseFieldError(makeNimstrLit("\'tetris\' is not accessible using discriminant \'kind\' of type \'GameObj\'")); }
        var Tmp35 = state_14085026;
        if (ConstSet39[Tmp35.kind]===undefined) { raiseFieldError(makeNimstrLit("\'tetris\' is not accessible using discriminant \'kind\' of type \'GameObj\'")); }
        Tmp34.tetris.pieceDropTickMultiplier = nimMax(0, (Tmp35.tetris.pieceDropTickMultiplier - 1));
        break;
      case "i":
      case "ı":
        musicVolume_12550203[0] = nimMax(0, (musicVolume_12550203[0] - 16));
        setVolume_12525043(currentMusic_12550201[0], ((musicVolume_12550203[0])|0));
        break;
      case "o":
        musicVolume_12550203[0] = nimMin(128, (musicVolume_12550203[0] + 16));
        setVolume_12525043(currentMusic_12550201[0], ((musicVolume_12550203[0])|0));
        break;
      case "Escape":
        finish_14070066(state_14085026);
        nimCopy(state_14085026, {kind: 1, initial: ({background: null}), tetris: ({board: arrayConstr(300, 0, NTI13745013), nextPieces: [({kind: 0, pos: 0, rot: 0}), ({kind: 0, pos: 0, rot: 0}), ({kind: 0, pos: 0, rot: 0}), ({kind: 0, pos: 0, rot: 0})], piece: ({kind: 0, pos: 0, rot: 0}), pieceDropTicking: false, pieceDropTick: 0, pieceDropTime: 0, pieceDropTickMultiplier: 0, pieceDropRetry: 0, pieceDropRetries: 0, holdPiece: ({kind: 0, pos: 0, rot: 0}), justHeld: false, randBuffer: [0, 0, 0, 0, 0, 0, 0], randBufferPos: 0})}, NTI14060072);
        init_14060078(state_14085026);
        break;
      default: 
        break;
      }
      break;
    case 3:
      break;
    default: 
      break;
    }

  
}
function keyRepeat_14225046(state_14225048, event_14225049) {
          var Tmp2;
        var Tmp6;
          var Tmp7;
        var Tmp8;
          var Tmp10;
        var Tmp14;
          var Tmp15;
        var Tmp16;

    switch (state_14225048.kind) {
    case 2:
      switch (toJSStr(cstrToNimstr(event_14225049.key))) {
      case "ArrowLeft":
      case "Left":
        var minCol_14230007 = 9;
        L1: do {
          var c_14235002 = 0;
          var colontmp__14955918 = ({kind: 0, pos: 0, rot: 0});
          var Tmp2 = state_14225048;
          if (ConstSet40[Tmp2.kind]===undefined) { raiseFieldError(makeNimstrLit("\'tetris\' is not accessible using discriminant \'kind\' of type \'GameObj\'")); }
          nimCopy(colontmp__14955918, Tmp2.tetris.piece, NTI13785377);
          if (!((colontmp__14955918.kind == 0))) {
          c_14235002 = colontmp__14955918.pos;
          if ((column_13785500(c_14235002) < minCol_14230007)) {
          minCol_14230007 = column_13785500(c_14235002);
          }
          
          }
          
          L3: do {
            var x_14955920 = null;
            var x_14955920_Idx = 0;
            var y_14955921 = null;
            var y_14955921_Idx = 0;
            var colontmp__14955922 = [];
            colontmp__14955922 = pieceExtensions_13785367[colontmp__14955918.kind];
            var i_14955923 = 0;
            var L_14955924 = (colontmp__14955922).length;
            L4: do {
                L5: while (true) {
                if (!(i_14955923 < L_14955924)) break L5;
                  x_14955920 = colontmp__14955922[i_14955923]; x_14955920_Idx = "Field0";
                  y_14955921 = colontmp__14955922[i_14955923]; y_14955921_Idx = "Field1";
                  var colontmp__14955943 = plusRot_13787251(colontmp__14955918.pos, x_14955920[x_14955920_Idx], y_14955921[y_14955921_Idx], colontmp__14955918.rot);
                  var c_14955926 = colontmp__14955943["Field0"];
                  var r_14955927 = colontmp__14955943["Field1"];
                  c_14235002 = coord_13785422(c_14955926, r_14955927);
                  if ((column_13785500(c_14235002) < minCol_14230007)) {
                  minCol_14230007 = column_13785500(c_14235002);
                  }
                  
                  i_14955923 += 1;
                }
            } while(false);
          } while(false);
        } while(false);
        if (!((minCol_14230007 == 0))) {
        var Tmp6 = state_14225048;
        if (ConstSet41[Tmp6.kind]===undefined) { raiseFieldError(makeNimstrLit("\'tetris\' is not accessible using discriminant \'kind\' of type \'GameObj\'")); }
        var newPiece_14245002 = nimCopy(null, Tmp6.tetris.piece, NTI13785377);
        newPiece_14245002.pos = (newPiece_14245002.pos - 1);
          var Tmp7 = state_14225048;
          if (ConstSet42[Tmp7.kind]===undefined) { raiseFieldError(makeNimstrLit("\'tetris\' is not accessible using discriminant \'kind\' of type \'GameObj\'")); }
        if (!(overlaps_13815243(Tmp7.tetris.board, newPiece_14245002))) {
        var Tmp8 = state_14225048;
        if (ConstSet43[Tmp8.kind]===undefined) { raiseFieldError(makeNimstrLit("\'tetris\' is not accessible using discriminant \'kind\' of type \'GameObj\'")); }
        nimCopy(Tmp8.tetris.piece, newPiece_14245002, NTI13785377);
        }
        
        }
        
        break;
      case "ArrowRight":
      case "Right":
        var maxCol_14255003 = 0;
        L9: do {
          var c_14260002 = 0;
          var colontmp__14955931 = ({kind: 0, pos: 0, rot: 0});
          var Tmp10 = state_14225048;
          if (ConstSet44[Tmp10.kind]===undefined) { raiseFieldError(makeNimstrLit("\'tetris\' is not accessible using discriminant \'kind\' of type \'GameObj\'")); }
          nimCopy(colontmp__14955931, Tmp10.tetris.piece, NTI13785377);
          if (!((colontmp__14955931.kind == 0))) {
          c_14260002 = colontmp__14955931.pos;
          if ((maxCol_14255003 < column_13785500(c_14260002))) {
          maxCol_14255003 = column_13785500(c_14260002);
          }
          
          }
          
          L11: do {
            var x_14955933 = null;
            var x_14955933_Idx = 0;
            var y_14955934 = null;
            var y_14955934_Idx = 0;
            var colontmp__14955935 = [];
            colontmp__14955935 = pieceExtensions_13785367[colontmp__14955931.kind];
            var i_14955936 = 0;
            var L_14955937 = (colontmp__14955935).length;
            L12: do {
                L13: while (true) {
                if (!(i_14955936 < L_14955937)) break L13;
                  x_14955933 = colontmp__14955935[i_14955936]; x_14955933_Idx = "Field0";
                  y_14955934 = colontmp__14955935[i_14955936]; y_14955934_Idx = "Field1";
                  var colontmp__14955944 = plusRot_13787251(colontmp__14955931.pos, x_14955933[x_14955933_Idx], y_14955934[y_14955934_Idx], colontmp__14955931.rot);
                  var c_14955939 = colontmp__14955944["Field0"];
                  var r_14955940 = colontmp__14955944["Field1"];
                  c_14260002 = coord_13785422(c_14955939, r_14955940);
                  if ((maxCol_14255003 < column_13785500(c_14260002))) {
                  maxCol_14255003 = column_13785500(c_14260002);
                  }
                  
                  i_14955936 += 1;
                }
            } while(false);
          } while(false);
        } while(false);
        if (!((maxCol_14255003 == 9))) {
        var Tmp14 = state_14225048;
        if (ConstSet45[Tmp14.kind]===undefined) { raiseFieldError(makeNimstrLit("\'tetris\' is not accessible using discriminant \'kind\' of type \'GameObj\'")); }
        var newPiece_14275002 = nimCopy(null, Tmp14.tetris.piece, NTI13785377);
        newPiece_14275002.pos = (newPiece_14275002.pos + 1);
          var Tmp15 = state_14225048;
          if (ConstSet46[Tmp15.kind]===undefined) { raiseFieldError(makeNimstrLit("\'tetris\' is not accessible using discriminant \'kind\' of type \'GameObj\'")); }
        if (!(overlaps_13815243(Tmp15.tetris.board, newPiece_14275002))) {
        var Tmp16 = state_14225048;
        if (ConstSet47[Tmp16.kind]===undefined) { raiseFieldError(makeNimstrLit("\'tetris\' is not accessible using discriminant \'kind\' of type \'GameObj\'")); }
        nimCopy(Tmp16.tetris.piece, newPiece_14275002, NTI13785377);
        }
        
        }
        
        break;
      default: 
        break;
      }
      break;
    case 1:
    case 3:
      break;
    default: 
      break;
    }

  
}
function keyReleased_14285015(state_14285017, event_14285018) {
        var Tmp1;
        var Tmp2;

    switch (state_14285017.kind) {
    case 2:
      switch (toJSStr(cstrToNimstr(event_14285018.key))) {
      case "ArrowDown":
      case "Down":
        var Tmp1 = state_14285017;
        if (ConstSet48[Tmp1.kind]===undefined) { raiseFieldError(makeNimstrLit("\'tetris\' is not accessible using discriminant \'kind\' of type \'GameObj\'")); }
        Tmp1.tetris.pieceDropTime = 120;
        var Tmp2 = state_14285017;
        if (ConstSet49[Tmp2.kind]===undefined) { raiseFieldError(makeNimstrLit("\'tetris\' is not accessible using discriminant \'kind\' of type \'GameObj\'")); }
        Tmp2.tetris.pieceDropRetries = 1;
        break;
      default: 
        break;
      }
      break;
    case 1:
    case 3:
      break;
    default: 
      break;
    }

  
}
function mouse_14300015(state_14300017, event_14300018) {
    switch (state_14300017.kind) {
    case 1:
    case 2:
    case 3:
      break;
    default: 
      break;
    }

  
}
function windowResize_14300032(state_14300034, event_14300035) {
    switch (state_14300034.kind) {
    case 1:
    case 2:
    case 3:
      break;
    default: 
      break;
    }

  
}
function addListeners_14300049(state_14300051) {
    function HEX3Aanonymous_14300052(ev_14300054) {
        var k_14300055 = ev_14300054;
        if (!(k_14300055.repeat)) {
        key_14085024(state_14300051, k_14300055);
        }
        
        keyRepeat_14225046(state_14300051, k_14300055);

      
    }
    function HEX3Aanonymous_14300099(ev_14300101) {
        keyReleased_14285015(state_14300051, ev_14300101);

      
    }
    function HEX3Aanonymous_14300115(ev_14300117) {
        mouse_14300015(state_14300051, ev_14300117);

      
    }
    function HEX3Aanonymous_14300147(ev_14300149) {
        canvas_12550008.width = window.innerWidth;
        canvas_12550008.height = window.innerHeight;
        windowResize_14300032(state_14300051, ev_14300149);

      
    }

    document.body.addEventListener("keydown", HEX3Aanonymous_14300052, false);
    document.body.addEventListener("keyup", HEX3Aanonymous_14300099, false);
    document.body.addEventListener("mousedown", HEX3Aanonymous_14300115, false);
    canvas_12550008.width = window.innerWidth;
    canvas_12550008.height = window.innerHeight;
    window.addEventListener("resize", HEX3Aanonymous_14300147, false);

  
}
function drop_14060014(state_14060016) {
    var spawned_14060056 = [false];
    drop_13995014(state_14060016, spawned_14060056, 0);

  
}
function min_2540014(x_2540016, y_2540017) {
    var Tmp1;
      var Tmp2;

  var result_2540018 = 0.0;

      if ((x_2540016 <= y_2540017)) Tmp2 = true; else {        Tmp2 = !((y_2540017 == y_2540017));      }    if (Tmp2) {
    Tmp1 = x_2540016;
    }
    else {
    Tmp1 = y_2540017;
    }
    
    result_2540018 = Tmp1;

  return result_2540018;

}
function overlapsOrOOB_13820034(board_13820039, piece_13820040) {
        var Tmp2;
                var Tmp6;

  var result_13820041 = [false];

  BeforeRet: do {
    result_13820041[0] = false;
    L1: do {
      var c_13820043 = 0;
      if (!((piece_13820040.kind == 0))) {
      c_13820043 = piece_13820040.pos;
        if (result_13820041[0]) Tmp2 = true; else {          Tmp2 = !((board_13820039[c_13820043] == 0));        }      if (Tmp2) {
      result_13820041[0] = true;
      break BeforeRet;
      }
      
      }
      
      L3: do {
        var x_14956174 = null;
        var x_14956174_Idx = 0;
        var y_14956175 = null;
        var y_14956175_Idx = 0;
        var colontmp__14956176 = [];
        colontmp__14956176 = pieceExtensions_13785367[piece_13820040.kind];
        var i_14956177 = 0;
        var L_14956178 = (colontmp__14956176).length;
        L4: do {
            L5: while (true) {
            if (!(i_14956177 < L_14956178)) break L5;
              x_14956174 = colontmp__14956176[i_14956177]; x_14956174_Idx = "Field0";
              y_14956175 = colontmp__14956176[i_14956177]; y_14956175_Idx = "Field1";
              var colontmp__14956184 = plusRot_13787251(piece_13820040.pos, x_14956174[x_14956174_Idx], y_14956175[y_14956175_Idx], piece_13820040.rot);
              var col_14956180 = colontmp__14956184["Field0"];
              var row_14956181 = colontmp__14956184["Field1"];
              if ((contains_13805002(col_14956180) && contains_13810002(row_14956181))) {
              c_13820043 = coord_13785422(col_14956180, row_14956181);
                if (result_13820041[0]) Tmp6 = true; else {                  Tmp6 = !((board_13820039[c_13820043] == 0));                }              if (Tmp6) {
              result_13820041[0] = true;
              break BeforeRet;
              }
              
              }
              else {
                result_13820041[0] = true;
                break L3;
              }
              
              i_14956177 += 1;
            }
        } while(false);
      } while(false);
    } while(false);
  } while (false);

  return result_13820041[0];

}
function singleLoop_14446312() {
        var Tmp1;
      var Tmp2;
        var Tmp3;
        var Tmp4;
        var Tmp5;
      var Tmp6;
      var Tmp7;
                        var Tmp14;
                        var Tmp15;
                              var Tmp22;
                              var Tmp23;
                                var Tmp24;
                                var Tmp25;
                                var Tmp26;
                                var Tmp27;
        var Tmp30;
      var Tmp34;
        var Tmp36;
        var Tmp38;
        var Tmp49;
      var Tmp50;
        var Tmp51;
        var Tmp52;
      var Tmp53;
        var Tmp54;
        var Tmp55;
        var Tmp57;
        var Tmp62;
                      var Tmp72;
                      var Tmp73;
      var Tmp74;
              var Tmp77;
                var Tmp78;
      var Tmp83;
      var Tmp84;
        var Tmp86;

    switch (game_14300401[0].kind) {
    case 2:
        var Tmp1 = game_14300401[0];
        if (ConstSet50[Tmp1.kind]===undefined) { raiseFieldError(makeNimstrLit("\'tetris\' is not accessible using discriminant \'kind\' of type \'GameObj\'")); }
      if (Tmp1.tetris.pieceDropTicking) {
      var Tmp2 = game_14300401[0];
      if (ConstSet51[Tmp2.kind]===undefined) { raiseFieldError(makeNimstrLit("\'tetris\' is not accessible using discriminant \'kind\' of type \'GameObj\'")); }
      Tmp2.tetris.pieceDropTick += 1;
        var Tmp3 = game_14300401[0];
        if (ConstSet52[Tmp3.kind]===undefined) { raiseFieldError(makeNimstrLit("\'tetris\' is not accessible using discriminant \'kind\' of type \'GameObj\'")); }
        var Tmp4 = game_14300401[0];
        if (ConstSet53[Tmp4.kind]===undefined) { raiseFieldError(makeNimstrLit("\'tetris\' is not accessible using discriminant \'kind\' of type \'GameObj\'")); }
        var Tmp5 = game_14300401[0];
        if (ConstSet54[Tmp5.kind]===undefined) { raiseFieldError(makeNimstrLit("\'tetris\' is not accessible using discriminant \'kind\' of type \'GameObj\'")); }
      if ((Math.trunc((Tmp3.tetris.pieceDropTime * fps_12550205[0]) / 120) <= (Tmp4.tetris.pieceDropTick * Tmp5.tetris.pieceDropTickMultiplier))) {
      var Tmp6 = game_14300401[0];
      if (ConstSet55[Tmp6.kind]===undefined) { raiseFieldError(makeNimstrLit("\'tetris\' is not accessible using discriminant \'kind\' of type \'GameObj\'")); }
      drop_14060014(Tmp6.tetris);
      var Tmp7 = game_14300401[0];
      if (ConstSet56[Tmp7.kind]===undefined) { raiseFieldError(makeNimstrLit("\'tetris\' is not accessible using discriminant \'kind\' of type \'GameObj\'")); }
      Tmp7.tetris.pieceDropTick = 0;
      }
      
      L8: do {
        var r_14490010 = 0;
        var i_14955958 = 0;
        L9: do {
            L10: while (true) {
            if (!(i_14955958 < 30)) break L10;
              r_14490010 = i_14955958;
              var anyEmpty_14490011 = false;
              L11: do {
                var c_14490020 = 0;
                var i_14955947 = 0;
                L12: do {
                    L13: while (true) {
                    if (!(i_14955947 < 10)) break L13;
                      c_14490020 = i_14955947;
                        var Tmp14 = game_14300401[0];
                        if (ConstSet57[Tmp14.kind]===undefined) { raiseFieldError(makeNimstrLit("\'tetris\' is not accessible using discriminant \'kind\' of type \'GameObj\'")); }
                      if (((Tmp15 = Tmp14.tetris.board, Tmp15)[coord_13785422(c_14490020, r_14490010)] == 0)) {
                      anyEmpty_14490011 = true;
                      break L11;
                      }
                      
                      i_14955947 += 1;
                    }
                } while(false);
              } while(false);
              if (!(anyEmpty_14490011)) {
              L16: do {
                var ri_14495013 = 0;
                var res_14955953 = r_14490010;
                L17: do {
                    L18: while (true) {
                    if (!(0 <= res_14955953)) break L18;
                      ri_14495013 = res_14955953;
                      L19: do {
                        var ci_14495022 = 0;
                        var i_14955951 = 0;
                        L20: do {
                            L21: while (true) {
                            if (!(i_14955951 < 10)) break L21;
                              ci_14495022 = i_14955951;
                              if ((ri_14495013 == 0)) {
                              var Tmp22 = game_14300401[0];
                              if (ConstSet58[Tmp22.kind]===undefined) { raiseFieldError(makeNimstrLit("\'tetris\' is not accessible using discriminant \'kind\' of type \'GameObj\'")); }
                              (Tmp23 = Tmp22.tetris.board, Tmp23)[coord_13785422(ci_14495022, ri_14495013)] = 0;
                              }
                              else {
                                var Tmp24 = game_14300401[0];
                                if (ConstSet59[Tmp24.kind]===undefined) { raiseFieldError(makeNimstrLit("\'tetris\' is not accessible using discriminant \'kind\' of type \'GameObj\'")); }
                                var Tmp26 = game_14300401[0];
                                if (ConstSet60[Tmp26.kind]===undefined) { raiseFieldError(makeNimstrLit("\'tetris\' is not accessible using discriminant \'kind\' of type \'GameObj\'")); }
                                var Tmp28 = (Tmp25 = Tmp24.tetris.board, Tmp25)[coord_13785422(ci_14495022, ri_14495013)]; (Tmp25 = Tmp24.tetris.board, Tmp25)[coord_13785422(ci_14495022, ri_14495013)] = (Tmp27 = Tmp26.tetris.board, Tmp27)[coord_13785422(ci_14495022, (ri_14495013 - 1))]; (Tmp27 = Tmp26.tetris.board, Tmp27)[coord_13785422(ci_14495022, (ri_14495013 - 1))] = Tmp28;                              }
                              
                              i_14955951 += 1;
                            }
                        } while(false);
                      } while(false);
                      res_14955953 -= 1;
                    }
                } while(false);
              } while(false);
              }
              
              i_14955958 += 1;
            }
        } while(false);
      } while(false);
      var maxRow_14510010 = 0;
      L29: do {
        var c_14515002 = 0;
        var colontmp__14955961 = ({kind: 0, pos: 0, rot: 0});
        var Tmp30 = game_14300401[0];
        if (ConstSet61[Tmp30.kind]===undefined) { raiseFieldError(makeNimstrLit("\'tetris\' is not accessible using discriminant \'kind\' of type \'GameObj\'")); }
        nimCopy(colontmp__14955961, Tmp30.tetris.piece, NTI13785377);
        if (!((colontmp__14955961.kind == 0))) {
        c_14515002 = colontmp__14955961.pos;
        if ((maxRow_14510010 < row_13785517(c_14515002))) {
        maxRow_14510010 = row_13785517(c_14515002);
        }
        
        }
        
        L31: do {
          var x_14955963 = null;
          var x_14955963_Idx = 0;
          var y_14955964 = null;
          var y_14955964_Idx = 0;
          var colontmp__14955965 = [];
          colontmp__14955965 = pieceExtensions_13785367[colontmp__14955961.kind];
          var i_14955966 = 0;
          var L_14955967 = (colontmp__14955965).length;
          L32: do {
              L33: while (true) {
              if (!(i_14955966 < L_14955967)) break L33;
                x_14955963 = colontmp__14955965[i_14955966]; x_14955963_Idx = "Field0";
                y_14955964 = colontmp__14955965[i_14955966]; y_14955964_Idx = "Field1";
                var colontmp__14956166 = plusRot_13787251(colontmp__14955961.pos, x_14955963[x_14955963_Idx], y_14955964[y_14955964_Idx], colontmp__14955961.rot);
                var c_14955969 = colontmp__14956166["Field0"];
                var r_14955970 = colontmp__14956166["Field1"];
                c_14515002 = coord_13785422(c_14955969, r_14955970);
                if ((maxRow_14510010 < row_13785517(c_14515002))) {
                maxRow_14510010 = row_13785517(c_14515002);
                }
                
                i_14955966 += 1;
              }
          } while(false);
        } while(false);
      } while(false);
      if ((maxRow_14510010 < 10)) {
      finish_14070066(game_14300401[0]);
      nimCopy(game_14300401[0], {kind: 1, initial: ({background: null}), tetris: ({board: arrayConstr(300, 0, NTI13745013), nextPieces: [({kind: 0, pos: 0, rot: 0}), ({kind: 0, pos: 0, rot: 0}), ({kind: 0, pos: 0, rot: 0}), ({kind: 0, pos: 0, rot: 0})], piece: ({kind: 0, pos: 0, rot: 0}), pieceDropTicking: false, pieceDropTick: 0, pieceDropTime: 0, pieceDropTickMultiplier: 0, pieceDropRetry: 0, pieceDropRetries: 0, holdPiece: ({kind: 0, pos: 0, rot: 0}), justHeld: false, randBuffer: [0, 0, 0, 0, 0, 0, 0], randBufferPos: 0})}, NTI14060072);
      init_14060078(game_14300401[0]);
      }
      
      }
      
      break;
    case 1:
    case 3:
      break;
    default: 
      break;
    }
    context_12550009.fillStyle = "#00000000";
    context_12550009.strokeStyle = "#00000000";
    context_12550009.clearRect(0, 0, canvas_12550008.width, canvas_12550008.height);
    var windowWidth_14545003 = ((canvas_12550008.width)|0);
    var windowHeight_14545004 = ((canvas_12550008.height)|0);
    switch (game_14300401[0].kind) {
    case 1:
      var Tmp34 = game_14300401[0];
      if (ConstSet62[Tmp34.kind]===undefined) { raiseFieldError(makeNimstrLit("\'initial\' is not accessible using discriminant \'kind\' of type \'GameObj\'")); }
      context_12550009.drawImage(Tmp34.initial.background, 0, 0, windowWidth_14545003, windowHeight_14545004);
      break;
    case 2:
      L35: do {
        var a_14560066 = HEX2F_2825648(((windowWidth_14545003)|0), 960);
        var b_14560067 = HEX2F_2825648(((windowHeight_14545004)|0), 540);
        if (!((a_14560066 == b_14560067))) {
        var newRatio_14565001 = min_2540014(a_14560066, b_14560067);
        Tmp36 = {Field0: (newRatio_14565001 * 9.6000000000000000e+002), Field1: (newRatio_14565001 * 5.4000000000000000e+002)};
        }
        else {
        Tmp36 = {Field0: windowWidth_14545003, Field1: windowHeight_14545004};
        }
        
      } while(false);
      var colontmp__14956167 = nimCopy(null, Tmp36, NTI14565002);
      var scaledWindowWidth_14565004 = colontmp__14956167["Field0"];
      var scaledWindowHeight_14565005 = colontmp__14956167["Field1"];
      var startX_14565006 = ((windowWidth_14545003 - scaledWindowWidth_14565004) / 2.0000000000000000e+000);
      var startY_14565007 = ((windowHeight_14545004 - scaledWindowHeight_14565005) / 2.0000000000000000e+000);
      var scaledTileWidth_14575001 = ((Math.ceil(((2.7000000000000000e+001 * scaledWindowWidth_14565004) / 9.6000000000000000e+002)))|0);
      var scaledTileHeight_14580001 = ((Math.ceil(((2.7000000000000000e+001 * scaledWindowHeight_14565005) / 5.4000000000000000e+002)))|0);
      context_12550009.fillStyle = "rgba(80,80,80,1.0)";
      context_12550009.strokeStyle = "rgba(80,80,80,1.0)";
      context_12550009.beginPath();
      context_12550009.rect((((((startX_14565006)|0) + ((((7.0700000000000000e+002 * scaledWindowHeight_14565005) / 5.4000000000000000e+002))|0)))|0), (((startY_14565007 + ((4.5000000000000000e+001 * scaledWindowWidth_14565004) / 9.6000000000000000e+002)))|0), ((Math.ceil(((7.5000000000000000e+001 * scaledWindowWidth_14565004) / 9.6000000000000000e+002)))|0), ((Math.ceil(((2.5500000000000000e+002 * scaledWindowHeight_14565005) / 5.4000000000000000e+002)))|0));
      context_12550009.stroke();
      L37: do {
        var i_14625066 = 0;
        var p_14625067 = ({kind: 0, pos: 0, rot: 0});
        var colontmp__14956033 = [({kind: 0, pos: 0, rot: 0}), ({kind: 0, pos: 0, rot: 0}), ({kind: 0, pos: 0, rot: 0}), ({kind: 0, pos: 0, rot: 0})];
        var Tmp38 = game_14300401[0];
        if (ConstSet63[Tmp38.kind]===undefined) { raiseFieldError(makeNimstrLit("\'tetris\' is not accessible using discriminant \'kind\' of type \'GameObj\'")); }
        nimCopy(colontmp__14956033, Tmp38.tetris.nextPieces, NTI13825211);
        var i_14956038 = 0;
        if ((i_14956038 <= 3)) {
        L39: do {
            L40: while (true) {
            if (!true) break L40;
              i_14625066 = i_14956038;
              nimCopy(p_14625067, colontmp__14956033[i_14956038], NTI13785377);
              context_12550009.fillStyle = pieceColors_13785202[p_14625067.kind];
              context_12550009.strokeStyle = pieceColors_13785202[p_14625067.kind];
              var maxX_14630002 = 0;
              var maxY_14630003 = 0;
              L41: do {
                var c_14630004 = 0;
                if (!((p_14625067.kind == 0))) {
                c_14630004 = p_14625067.pos;
                if ((maxX_14630002 < column_13785500(c_14630004))) {
                maxX_14630002 = column_13785500(c_14630004);
                }
                
                if ((maxY_14630003 < row_13785517(c_14630004))) {
                maxY_14630003 = row_13785517(c_14630004);
                }
                
                }
                
                L42: do {
                  var x_14955999 = null;
                  var x_14955999_Idx = 0;
                  var y_14956000 = null;
                  var y_14956000_Idx = 0;
                  var colontmp__14956001 = [];
                  colontmp__14956001 = pieceExtensions_13785367[p_14625067.kind];
                  var i_14956002 = 0;
                  var L_14956003 = (colontmp__14956001).length;
                  L43: do {
                      L44: while (true) {
                      if (!(i_14956002 < L_14956003)) break L44;
                        x_14955999 = colontmp__14956001[i_14956002]; x_14955999_Idx = "Field0";
                        y_14956000 = colontmp__14956001[i_14956002]; y_14956000_Idx = "Field1";
                        var colontmp__14956168 = plusRot_13787251(p_14625067.pos, x_14955999[x_14955999_Idx], y_14956000[y_14956000_Idx], p_14625067.rot);
                        var c_14956005 = colontmp__14956168["Field0"];
                        var r_14956006 = colontmp__14956168["Field1"];
                        c_14630004 = coord_13785422(c_14956005, r_14956006);
                        if ((maxX_14630002 < column_13785500(c_14630004))) {
                        maxX_14630002 = column_13785500(c_14630004);
                        }
                        
                        if ((maxY_14630003 < row_13785517(c_14630004))) {
                        maxY_14630003 = row_13785517(c_14630004);
                        }
                        
                        i_14956002 += 1;
                      }
                  } while(false);
                } while(false);
              } while(false);
              var width_14640003 = (maxX_14630002 + 1);
              var height_14640004 = (maxY_14630003 + 1);
              var unit_14640005 = (4.5000000000000000e+001 / nimMax(width_14640003, height_14640004));
              var tileWidth_14645001 = ((Math.ceil(((unit_14640005 * scaledWindowWidth_14565004) / 9.6000000000000000e+002)))|0);
              var tileHeight_14650001 = ((Math.ceil(((unit_14640005 * scaledWindowHeight_14565005) / 5.4000000000000000e+002)))|0);
              var tileXStart_14650002 = (7.2200000000000000e+002 + ((4.5000000000000000e+001 - (width_14640003 * unit_14640005)) / 2.0000000000000000e+000));
              var tileYStart_14650003 = ((6.0000000000000000e+001 + (i_14625066 * 6.0000000000000000e+001)) + ((4.5000000000000000e+001 - (height_14640004 * unit_14640005)) / 2.0000000000000000e+000));
              L45: do {
                var c_14650004 = 0;
                if (!((p_14625067.kind == 0))) {
                c_14650004 = p_14625067.pos;
                var x_14660001 = (((startX_14565006 + ((((column_13785500(c_14650004) * unit_14640005) + tileXStart_14650002) * scaledWindowWidth_14565004) / 9.6000000000000000e+002)))|0);
                var y_14670001 = (((startY_14565007 + ((((row_13785517(c_14650004) * unit_14640005) + tileYStart_14650003) * scaledWindowWidth_14565004) / 9.6000000000000000e+002)))|0);
                context_12550009.fillRect(x_14660001, y_14670001, tileWidth_14645001, tileHeight_14650001);
                }
                
                L46: do {
                  var x_14956019 = null;
                  var x_14956019_Idx = 0;
                  var y_14956020 = null;
                  var y_14956020_Idx = 0;
                  var colontmp__14956021 = [];
                  colontmp__14956021 = pieceExtensions_13785367[p_14625067.kind];
                  var i_14956022 = 0;
                  var L_14956023 = (colontmp__14956021).length;
                  L47: do {
                      L48: while (true) {
                      if (!(i_14956022 < L_14956023)) break L48;
                        x_14956019 = colontmp__14956021[i_14956022]; x_14956019_Idx = "Field0";
                        y_14956020 = colontmp__14956021[i_14956022]; y_14956020_Idx = "Field1";
                        var colontmp__14956169 = plusRot_13787251(p_14625067.pos, x_14956019[x_14956019_Idx], y_14956020[y_14956020_Idx], p_14625067.rot);
                        var c_14956025 = colontmp__14956169["Field0"];
                        var r_14956026 = colontmp__14956169["Field1"];
                        c_14650004 = coord_13785422(c_14956025, r_14956026);
                        var x_14956027 = (((startX_14565006 + ((((column_13785500(c_14650004) * unit_14640005) + tileXStart_14650002) * scaledWindowWidth_14565004) / 9.6000000000000000e+002)))|0);
                        var y_14956030 = (((startY_14565007 + ((((row_13785517(c_14650004) * unit_14640005) + tileYStart_14650003) * scaledWindowWidth_14565004) / 9.6000000000000000e+002)))|0);
                        context_12550009.fillRect(x_14956027, y_14956030, tileWidth_14645001, tileHeight_14650001);
                        i_14956022 += 1;
                      }
                  } while(false);
                } while(false);
              } while(false);
              if ((3 <= i_14956038)) {
              break L39;
              }
              
              i_14956038 += 1;
            }
        } while(false);
        }
        
      } while(false);
      context_12550009.fillStyle = "rgba(80,80,80,1.0)";
      context_12550009.strokeStyle = "rgba(80,80,80,1.0)";
      context_12550009.beginPath();
      context_12550009.rect((((startX_14565006 + ((1.9500000000000000e+002 * scaledWindowWidth_14565004) / 9.6000000000000000e+002)))|0), (((startY_14565007 + ((4.5000000000000000e+001 * scaledWindowWidth_14565004) / 9.6000000000000000e+002)))|0), ((Math.ceil(((7.5000000000000000e+001 * scaledWindowWidth_14565004) / 9.6000000000000000e+002)))|0), ((Math.ceil(((7.5000000000000000e+001 * scaledWindowHeight_14565005) / 5.4000000000000000e+002)))|0));
      context_12550009.stroke();
        var Tmp49 = game_14300401[0];
        if (ConstSet64[Tmp49.kind]===undefined) { raiseFieldError(makeNimstrLit("\'tetris\' is not accessible using discriminant \'kind\' of type \'GameObj\'")); }
      if (!((Tmp49.tetris.holdPiece.kind == 0))) {
        var Tmp51 = game_14300401[0];
        if (ConstSet65[Tmp51.kind]===undefined) { raiseFieldError(makeNimstrLit("\'tetris\' is not accessible using discriminant \'kind\' of type \'GameObj\'")); }
      if (Tmp51.tetris.justHeld) {
      Tmp50 = "rgba(60,60,60,1.0)";
      }
      else {
        var Tmp52 = game_14300401[0];
        if (ConstSet66[Tmp52.kind]===undefined) { raiseFieldError(makeNimstrLit("\'tetris\' is not accessible using discriminant \'kind\' of type \'GameObj\'")); }
      Tmp50 = pieceColors_13785202[Tmp52.tetris.holdPiece.kind];
      }
      
      context_12550009.fillStyle = Tmp50;
        var Tmp54 = game_14300401[0];
        if (ConstSet67[Tmp54.kind]===undefined) { raiseFieldError(makeNimstrLit("\'tetris\' is not accessible using discriminant \'kind\' of type \'GameObj\'")); }
      if (Tmp54.tetris.justHeld) {
      Tmp53 = "rgba(60,60,60,1.0)";
      }
      else {
        var Tmp55 = game_14300401[0];
        if (ConstSet68[Tmp55.kind]===undefined) { raiseFieldError(makeNimstrLit("\'tetris\' is not accessible using discriminant \'kind\' of type \'GameObj\'")); }
      Tmp53 = pieceColors_13785202[Tmp55.tetris.holdPiece.kind];
      }
      
      context_12550009.strokeStyle = Tmp53;
      var maxX_14745002 = 0;
      var maxY_14745003 = 0;
      L56: do {
        var c_14750002 = 0;
        var colontmp__14956049 = ({kind: 0, pos: 0, rot: 0});
        var Tmp57 = game_14300401[0];
        if (ConstSet69[Tmp57.kind]===undefined) { raiseFieldError(makeNimstrLit("\'tetris\' is not accessible using discriminant \'kind\' of type \'GameObj\'")); }
        nimCopy(colontmp__14956049, Tmp57.tetris.holdPiece, NTI13785377);
        if (!((colontmp__14956049.kind == 0))) {
        c_14750002 = colontmp__14956049.pos;
        if ((maxX_14745002 < column_13785500(c_14750002))) {
        maxX_14745002 = column_13785500(c_14750002);
        }
        
        if ((maxY_14745003 < row_13785517(c_14750002))) {
        maxY_14745003 = row_13785517(c_14750002);
        }
        
        }
        
        L58: do {
          var x_14956051 = null;
          var x_14956051_Idx = 0;
          var y_14956052 = null;
          var y_14956052_Idx = 0;
          var colontmp__14956053 = [];
          colontmp__14956053 = pieceExtensions_13785367[colontmp__14956049.kind];
          var i_14956054 = 0;
          var L_14956055 = (colontmp__14956053).length;
          L59: do {
              L60: while (true) {
              if (!(i_14956054 < L_14956055)) break L60;
                x_14956051 = colontmp__14956053[i_14956054]; x_14956051_Idx = "Field0";
                y_14956052 = colontmp__14956053[i_14956054]; y_14956052_Idx = "Field1";
                var colontmp__14956170 = plusRot_13787251(colontmp__14956049.pos, x_14956051[x_14956051_Idx], y_14956052[y_14956052_Idx], colontmp__14956049.rot);
                var c_14956057 = colontmp__14956170["Field0"];
                var r_14956058 = colontmp__14956170["Field1"];
                c_14750002 = coord_13785422(c_14956057, r_14956058);
                if ((maxX_14745002 < column_13785500(c_14750002))) {
                maxX_14745002 = column_13785500(c_14750002);
                }
                
                if ((maxY_14745003 < row_13785517(c_14750002))) {
                maxY_14745003 = row_13785517(c_14750002);
                }
                
                i_14956054 += 1;
              }
          } while(false);
        } while(false);
      } while(false);
      var width_14760002 = (maxX_14745002 + 1);
      var height_14760003 = (maxY_14745003 + 1);
      var unit_14760004 = (4.5000000000000000e+001 / nimMax(width_14760002, height_14760003));
      var tileWidth_14765001 = ((Math.ceil(((unit_14760004 * scaledWindowWidth_14565004) / 9.6000000000000000e+002)))|0);
      var tileHeight_14770001 = ((Math.ceil(((unit_14760004 * scaledWindowHeight_14565005) / 5.4000000000000000e+002)))|0);
      var tileXStart_14770002 = (2.1000000000000000e+002 + ((4.5000000000000000e+001 - (width_14760002 * unit_14760004)) / 2.0000000000000000e+000));
      var tileYStart_14770003 = (6.0000000000000000e+001 + ((4.5000000000000000e+001 - (height_14760003 * unit_14760004)) / 2.0000000000000000e+000));
      L61: do {
        var c_14775002 = 0;
        var colontmp__14956069 = ({kind: 0, pos: 0, rot: 0});
        var Tmp62 = game_14300401[0];
        if (ConstSet70[Tmp62.kind]===undefined) { raiseFieldError(makeNimstrLit("\'tetris\' is not accessible using discriminant \'kind\' of type \'GameObj\'")); }
        nimCopy(colontmp__14956069, Tmp62.tetris.holdPiece, NTI13785377);
        if (!((colontmp__14956069.kind == 0))) {
        c_14775002 = colontmp__14956069.pos;
        var x_14785001 = (((startX_14565006 + ((((column_13785500(c_14775002) * unit_14760004) + tileXStart_14770002) * scaledWindowWidth_14565004) / 9.6000000000000000e+002)))|0);
        var y_14795001 = (((startY_14565007 + ((((row_13785517(c_14775002) * unit_14760004) + tileYStart_14770003) * scaledWindowWidth_14565004) / 9.6000000000000000e+002)))|0);
        context_12550009.fillRect(x_14785001, y_14795001, tileWidth_14765001, tileHeight_14770001);
        }
        
        L63: do {
          var x_14956071 = null;
          var x_14956071_Idx = 0;
          var y_14956072 = null;
          var y_14956072_Idx = 0;
          var colontmp__14956073 = [];
          colontmp__14956073 = pieceExtensions_13785367[colontmp__14956069.kind];
          var i_14956074 = 0;
          var L_14956075 = (colontmp__14956073).length;
          L64: do {
              L65: while (true) {
              if (!(i_14956074 < L_14956075)) break L65;
                x_14956071 = colontmp__14956073[i_14956074]; x_14956071_Idx = "Field0";
                y_14956072 = colontmp__14956073[i_14956074]; y_14956072_Idx = "Field1";
                var colontmp__14956171 = plusRot_13787251(colontmp__14956069.pos, x_14956071[x_14956071_Idx], y_14956072[y_14956072_Idx], colontmp__14956069.rot);
                var c_14956077 = colontmp__14956171["Field0"];
                var r_14956078 = colontmp__14956171["Field1"];
                c_14775002 = coord_13785422(c_14956077, r_14956078);
                var x_14956079 = (((startX_14565006 + ((((column_13785500(c_14775002) * unit_14760004) + tileXStart_14770002) * scaledWindowWidth_14565004) / 9.6000000000000000e+002)))|0);
                var y_14956082 = (((startY_14565007 + ((((row_13785517(c_14775002) * unit_14760004) + tileYStart_14770003) * scaledWindowWidth_14565004) / 9.6000000000000000e+002)))|0);
                context_12550009.fillRect(x_14956079, y_14956082, tileWidth_14765001, tileHeight_14770001);
                i_14956074 += 1;
              }
          } while(false);
        } while(false);
      } while(false);
      }
      
      L66: do {
        var rowI_14800020 = 0;
        var i_14956101 = 10;
        L67: do {
            L68: while (true) {
            if (!(i_14956101 < 30)) break L68;
              rowI_14800020 = i_14956101;
              L69: do {
                var colI_14800029 = 0;
                var i_14956099 = 0;
                L70: do {
                    L71: while (true) {
                    if (!(i_14956099 < 10)) break L71;
                      colI_14800029 = i_14956099;
                      var Tmp72 = game_14300401[0];
                      if (ConstSet71[Tmp72.kind]===undefined) { raiseFieldError(makeNimstrLit("\'tetris\' is not accessible using discriminant \'kind\' of type \'GameObj\'")); }
                      var p_14805002 = (Tmp73 = Tmp72.tetris.board, Tmp73)[coord_13785422(colI_14800029, rowI_14800020)];
                      var x_14815001 = (((((startX_14565006)|0) + ((((((colI_14800029 * 27) + 345) * scaledWindowHeight_14565005) / 5.4000000000000000e+002))|0)))|0);
                      var y_14825001 = (((((startY_14565007)|0) + ((((((rowI_14800020 - 10) * 27) * scaledWindowHeight_14565005) / 5.4000000000000000e+002))|0)))|0);
                      if (!((p_14805002 == 0))) {
                      context_12550009.fillStyle = pieceColors_13785202[p_14805002];
                      context_12550009.strokeStyle = pieceColors_13785202[p_14805002];
                      context_12550009.fillRect(x_14815001, y_14825001, scaledTileWidth_14575001, scaledTileHeight_14580001);
                      }
                      
                      context_12550009.fillStyle = "rgba(80,80,80,1.0)";
                      context_12550009.strokeStyle = "rgba(80,80,80,1.0)";
                      context_12550009.beginPath();
                      context_12550009.rect(x_14815001, y_14825001, scaledTileWidth_14575001, scaledTileHeight_14580001);
                      context_12550009.stroke();
                      i_14956099 += 1;
                    }
                } while(false);
              } while(false);
              i_14956101 += 1;
            }
        } while(false);
      } while(false);
      var Tmp74 = game_14300401[0];
      if (ConstSet72[Tmp74.kind]===undefined) { raiseFieldError(makeNimstrLit("\'tetris\' is not accessible using discriminant \'kind\' of type \'GameObj\'")); }
      var shadowPiece_14855002 = nimCopy(null, Tmp74.tetris.piece, NTI13785377);
      L75: do {
          L76: while (true) {
          if (!true) break L76;
            var oldPos_14855003 = shadowPiece_14855002.pos;
            var newRow_14855004 = (row_13785517(oldPos_14855003) + 1);
              if (!(contains_13810002(newRow_14855004))) Tmp77 = true; else {                shadowPiece_14855002.pos = coord_13785422(column_13785500(oldPos_14855003), newRow_14855004);
                var Tmp78 = game_14300401[0];
                if (ConstSet73[Tmp78.kind]===undefined) { raiseFieldError(makeNimstrLit("\'tetris\' is not accessible using discriminant \'kind\' of type \'GameObj\'")); }
                Tmp77 = overlapsOrOOB_13820034(Tmp78.tetris.board, shadowPiece_14855002);              }            if (Tmp77) {
            shadowPiece_14855002.pos = oldPos_14855003;
            break L75;
            }
            
          }
      } while(false);
      context_12550009.fillStyle = "rgba(200,200,200,1.0)";
      context_12550009.strokeStyle = "rgba(200,200,200,1.0)";
      L79: do {
        var c_14875001 = 0;
        if (!((shadowPiece_14855002.kind == 0))) {
        c_14875001 = shadowPiece_14855002.pos;
        if ((10 <= row_13785517(c_14875001))) {
        var x_14890001 = (((((startX_14565006)|0) + ((((((column_13785500(c_14875001) * 27) + 345) * scaledWindowHeight_14565005) / 5.4000000000000000e+002))|0)))|0);
        var y_14900001 = (((((startY_14565007)|0) + ((((((row_13785517(c_14875001) - 10) * 27) * scaledWindowHeight_14565005) / 5.4000000000000000e+002))|0)))|0);
        context_12550009.fillRect(x_14890001, y_14900001, scaledTileWidth_14575001, scaledTileHeight_14580001);
        }
        
        }
        
        L80: do {
          var x_14956117 = null;
          var x_14956117_Idx = 0;
          var y_14956118 = null;
          var y_14956118_Idx = 0;
          var colontmp__14956119 = [];
          colontmp__14956119 = pieceExtensions_13785367[shadowPiece_14855002.kind];
          var i_14956120 = 0;
          var L_14956121 = (colontmp__14956119).length;
          L81: do {
              L82: while (true) {
              if (!(i_14956120 < L_14956121)) break L82;
                x_14956117 = colontmp__14956119[i_14956120]; x_14956117_Idx = "Field0";
                y_14956118 = colontmp__14956119[i_14956120]; y_14956118_Idx = "Field1";
                var colontmp__14956185 = plusRot_13787251(shadowPiece_14855002.pos, x_14956117[x_14956117_Idx], y_14956118[y_14956118_Idx], shadowPiece_14855002.rot);
                var c_14956123 = colontmp__14956185["Field0"];
                var r_14956124 = colontmp__14956185["Field1"];
                c_14875001 = coord_13785422(c_14956123, r_14956124);
                if ((10 <= row_13785517(c_14875001))) {
                var x_14956125 = (((((startX_14565006)|0) + ((((((column_13785500(c_14875001) * 27) + 345) * scaledWindowHeight_14565005) / 5.4000000000000000e+002))|0)))|0);
                var y_14956130 = (((((startY_14565007)|0) + ((((((row_13785517(c_14875001) - 10) * 27) * scaledWindowHeight_14565005) / 5.4000000000000000e+002))|0)))|0);
                context_12550009.fillRect(x_14956125, y_14956130, scaledTileWidth_14575001, scaledTileHeight_14580001);
                }
                
                i_14956120 += 1;
              }
          } while(false);
        } while(false);
      } while(false);
      var Tmp83 = game_14300401[0];
      if (ConstSet74[Tmp83.kind]===undefined) { raiseFieldError(makeNimstrLit("\'tetris\' is not accessible using discriminant \'kind\' of type \'GameObj\'")); }
      context_12550009.fillStyle = pieceColors_13785202[Tmp83.tetris.piece.kind];
      var Tmp84 = game_14300401[0];
      if (ConstSet75[Tmp84.kind]===undefined) { raiseFieldError(makeNimstrLit("\'tetris\' is not accessible using discriminant \'kind\' of type \'GameObj\'")); }
      context_12550009.strokeStyle = pieceColors_13785202[Tmp84.tetris.piece.kind];
      L85: do {
        var c_14920002 = 0;
        var colontmp__14956146 = ({kind: 0, pos: 0, rot: 0});
        var Tmp86 = game_14300401[0];
        if (ConstSet76[Tmp86.kind]===undefined) { raiseFieldError(makeNimstrLit("\'tetris\' is not accessible using discriminant \'kind\' of type \'GameObj\'")); }
        nimCopy(colontmp__14956146, Tmp86.tetris.piece, NTI13785377);
        if (!((colontmp__14956146.kind == 0))) {
        c_14920002 = colontmp__14956146.pos;
        if ((10 <= row_13785517(c_14920002))) {
        var x_14935001 = (((((startX_14565006)|0) + ((((((column_13785500(c_14920002) * 27) + 345) * scaledWindowHeight_14565005) / 5.4000000000000000e+002))|0)))|0);
        var y_14945001 = (((((startY_14565007)|0) + ((((((row_13785517(c_14920002) - 10) * 27) * scaledWindowHeight_14565005) / 5.4000000000000000e+002))|0)))|0);
        context_12550009.fillRect(x_14935001, y_14945001, scaledTileWidth_14575001, scaledTileHeight_14580001);
        }
        
        }
        
        L87: do {
          var x_14956148 = null;
          var x_14956148_Idx = 0;
          var y_14956149 = null;
          var y_14956149_Idx = 0;
          var colontmp__14956150 = [];
          colontmp__14956150 = pieceExtensions_13785367[colontmp__14956146.kind];
          var i_14956151 = 0;
          var L_14956152 = (colontmp__14956150).length;
          L88: do {
              L89: while (true) {
              if (!(i_14956151 < L_14956152)) break L89;
                x_14956148 = colontmp__14956150[i_14956151]; x_14956148_Idx = "Field0";
                y_14956149 = colontmp__14956150[i_14956151]; y_14956149_Idx = "Field1";
                var colontmp__14956186 = plusRot_13787251(colontmp__14956146.pos, x_14956148[x_14956148_Idx], y_14956149[y_14956149_Idx], colontmp__14956146.rot);
                var c_14956154 = colontmp__14956186["Field0"];
                var r_14956155 = colontmp__14956186["Field1"];
                c_14920002 = coord_13785422(c_14956154, r_14956155);
                if ((10 <= row_13785517(c_14920002))) {
                var x_14956156 = (((((startX_14565006)|0) + ((((((column_13785500(c_14920002) * 27) + 345) * scaledWindowHeight_14565005) / 5.4000000000000000e+002))|0)))|0);
                var y_14956161 = (((((startY_14565007)|0) + ((((((row_13785517(c_14920002) - 10) * 27) * scaledWindowHeight_14565005) / 5.4000000000000000e+002))|0)))|0);
                context_12550009.fillRect(x_14956156, y_14956161, scaledTileWidth_14575001, scaledTileHeight_14580001);
                }
                
                i_14956151 += 1;
              }
          } while(false);
        } while(false);
      } while(false);
      break;
    case 3:
      break;
    default: 
      break;
    }
    numTicks_12550204[0] += 1;

  
}
async function mainLoop_14955001() {
    function foo_14955203(timestamp_14955205) {
        fps_12550205[0] = (((1.0000000000000000e+003 / (timestamp_14955205 - lastTimestamp_14955201)))|0);
        singleLoop_14446312();
        lastTimestamp_14955201 = timestamp_14955205;
        var _ = window.requestAnimationFrame(foo_14955203);

      
    }

  var result_14955007 = null;

  BeforeRet: do {
    var lastTimestamp_14955201 = 0.0;
    addListeners_14300049(game_14300401[0]);
    var _ = window.requestAnimationFrame(foo_14955203);
    result_14955007 = undefined;
    break BeforeRet;
  } while (false);

  return result_14955007;

}
var _ = mainLoop_14955001();
